<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AjaxControlToolkit</name>
    </assembly>
    <members>
        <member name="T:AjaxControlToolkit.ScriptControlBase">
            <summary>
            ScriptControl is used to define complex custom controls which support ASP.NET AJAX script extensions
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.IControlResolver">
            <summary>
            Describes an object that can be used to resolve references to a control by its ID
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.IControlResolver.ResolveControl(System.String)">
            <summary>
            Resolves a reference to a control by its ID
            </summary>
            <param name="controlID"></param>
            <returns></returns>
        </member>
        <member name="T:AjaxControlToolkit.IClientStateManager">
            <summary>
            Describes an object which supports ClientState
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.IClientStateManager.LoadClientState(System.String)">
            <summary>
            Loads the client state for the object
            </summary>
            <param name="clientState"></param>
        </member>
        <member name="M:AjaxControlToolkit.IClientStateManager.SaveClientState">
            <summary>
            Saves the client state for the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:AjaxControlToolkit.IClientStateManager.SupportsClientState">
            <summary>
            Whether ClientState is supported by the object instance
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.#ctor(System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Initializes a new ScriptControl
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.#ctor">
            <summary>
            Initializes a new ScriptControl
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.#ctor(System.String)">
            <summary>
            Initializes a new ScriptControl
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new ScriptControl
            </summary>
            <param name="enableClientState"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.#ctor(System.Boolean,System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Initializes a new ScriptControl
            </summary>
            <param name="enableClientState"></param>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new ScriptControl
            </summary>
            <param name="enableClientState"></param>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.EnsureScriptManager">
            <summary>
            Ensures a ScriptManager exists on the Page for this Control
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.FindControl(System.String)">
            <summary>
            Finds a control reference by its ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.OnLoad(System.EventArgs)">
            <summary>
            Handles OnLoad
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.OnPreRender(System.EventArgs)">
            <summary>
            Fires the PreRender event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.LoadClientState(System.String)">
            <summary>
            Loads the client state data
            </summary>
            <param name="clientState"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.SaveClientState">
            <summary>
            Saves the client state data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Executed when post data is loaded from the request
            </summary>
            <param name="postDataKey"></param>
            <param name="postCollection"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.RaisePostDataChangedEvent">
            <summary>
            Executed when post data changes should invoke a chagned event
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.GetScriptDescriptors">
            <summary>
            Gets the ScriptDescriptors that make up this control
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.GetScriptReferences">
            <summary>
            Gets the script references for this control
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.DescribeComponent(System.Web.UI.ScriptComponentDescriptor)">
            <summary>
            Describes the settings for this control.
            </summary>
            <param name="descriptor"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.GetCallbackResult">
            <summary>
            Handles a callback event
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptControlBase.RaiseCallbackEvent(System.String)">
            <summary>
            Raises a callback event
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.ScriptPath">
            <summary>
            For debugging - setting this causes the extender to load the specified script instead of the one out of the resources.  This
            lets you set breakpoints and modify the script without rebuilding, etc.
            </summary>
            <remarks>
            Note to inheritors: If you do not wish the user to set the script path, override script path and throw a NotSupportedException on set.  Also decorate the ScriptPath attribute with a [Browsable(false)] and [EditorBrowsableState(EditorBrowsableState.Never)]
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.ClientControlType">
            <summary>
            The script type to use for the ScriptControl
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.IsRenderingScript">
            <summary>
            Property for determining if script rendering is currently underway.  This is used to determine
            if Script or markup is being rendered.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.SupportsClientState">
            <summary>
            Whether this control supports ClientState
            </summary>
            <remarks>
            Note to inheritors: You should either pass true to the constructor for enableClientState or override this property to enable client state for inherited controls.
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.ScriptManager">
            <summary>
            Gets the ScriptManager for the page
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.ClientStateFieldID">
            <summary>
            The ID of the ClientState field
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.TagKey">
            <summary>
            Gets the tag key used when rendering the outer wrapper element for this user control
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptControlBase.TagName">
            <summary>
            Gets the tag name used when rendering the outer wrapper element for this user control
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderList">
            <summary>
            This class implements a reorderable, data bindable list control.
            
            It demonstrates writing a control that is AJAX-aware in that it creates and
            manages a set of ASP.NET AJAX extenders. to imporove it's client experience.
            
            It is also data aware.  When supplied with a database that matches an expected format,
            it will automatically update the sort order of the items.  The database must have an integer-typed
            column that this list can have "ownership" of.  By setting this column name into the "SortOrderField" property,
            reorders will happen automatically.
            
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ReorderList._childList">
            <summary>
            The actual list control.  This control actually renders a DIV with some children:
            
            The UL control
            The DropWatcherExtender
            The DraggableListitemExtender
            The drop template control
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ReorderList._dropTemplateControl">
            <summary>
            A control that we generate for the drop template
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ReorderList._reorderTemplate">
            <summary>
            Our template member variables.
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ReorderList._draggableItems">
            <summary>
            The list of items that can be dragged around.  We maintain this list so we know
            what to generate later in the draggableListItems Extender
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.CopyDictionary(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Helper method to copy the values from one dictionary to another.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.CreateChildControls(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            This method does the heavy lifting of building the control hierarchy from a dataSource.
            
            If no datasource is passed in, for example when a postback occurs, it creates a dummy list
            based on the number of items it last had.
            </summary>
            <param name="dataSource"></param>
            
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.CreateReorderArea(System.Int32,System.String)">
            <summary>
            Creates the control that will be our reorder template.
            </summary>
            <param name="index"></param>
            <param name="reorderKey"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.CreateInsertItem(System.Int32)">
            <summary>
            Creates the InsertItem object for a given index.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.CreateDragHandle(AjaxControlToolkit.ReorderListItem)">
            <summary>
            Builds the drag handle element and the table which controls it's alignment
            </summary>
            <param name="item">The item that's currently at this index</param>        
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.CreateItem(System.Int32,System.Boolean,System.Object,System.Web.UI.WebControls.ListItemType,System.Boolean)">
            <summary>
            Creates a item at the specified index and binds it to the given data source.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.DoReorderInternal(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Reorder row [oldIndex] to position [newIndex] in a datatable.
            </summary>
            <param name="dataSource"></param>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.DoReorderInternal(System.Collections.IEnumerable,System.Int32,System.Int32,System.Web.UI.DataSourceView)">
            <summary>
            Does the real work of the reorder.  It moves the item from oldIndex to newIndex in the given data source.
            </summary>
            <param name="dataSource">The datasource this list is bound to</param>
            <param name="oldIndex">The original index of the item that we're reordering</param>
            <param name="newIndex">The designation index</param>
            <param name="dsv">The DataSourceView associated with this control</param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,AjaxControlToolkit.ReorderListItem,System.Boolean,System.Boolean)">
            <summary>
            Get the template to give us the current values for each field we need.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.GetDropTemplateControl(System.Web.UI.Control@,System.Web.UI.Control@)">
            <summary>
            Creates our DropTemplate control.   The DragDropList behavior uses a second UL control to
            do the actual drags.  That control has children that represent the item to use as the dropTemplate
            or empty template.  This method creates that structure.
            </summary>
            <param name="dropItem">Returns a reference to the item to use as the drop template</param>
            <param name="emptyItem">Returns a reference to the item to use as the empty template.</param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.GetNewItemSortValue(System.Boolean@)">
            <summary>
            Walks the database to find the correct value for a new item inserted into the list.
            </summary>        
            <returns>The sort value for the new item.</returns>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.MoveChildren(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Moves the children of one control to another.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.OnBubbleEvent(System.Object,System.EventArgs)">
            <summary>
            Dispatches a bubbled event to the proper handler.        
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.PerformDataBinding(System.Collections.IEnumerable)">
            <summary>
            Do the actual databinding
            </summary>
            <param name="data">our datasource</param>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.PrepareRowValues(AjaxControlToolkit.ReorderListCommandEventArgs,System.Collections.IDictionary@,System.Collections.Specialized.IOrderedDictionary@,System.Collections.IDictionary@,System.Boolean)">
            <summary>
            Extracts the values from an editable row into the given dictionaries.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.ProcessReorder(System.Int32,System.Int32)">
            <summary>
            Handle a reorder event from a server postback.
            </summary>
            <param name="newIndex">The item's new position</param>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.UpdateItem(System.Int32)">
            <summary>
            Performs an update of the specified row with it's current values.
            </summary>
            <param name="rowIndex"></param>
            <param name="causesValidation"></param>
        </member>
        <member name="M:AjaxControlToolkit.ReorderList.ParsePostBack(System.String,System.String@,System.String@,System.String[]@)">
            <summary>
            Parse our postback string into the event name, which item it's on, and any arguments
            </summary>
            <param name="eventArgument">The unparsed event postback string</param>
            <param name="eventName">The name of the event</param>
            <param name="itemId">The ID of the item that caused it</param>
            <param name="args">An array of args</param>
            <returns></returns>
        </member>
        <member name="E:AjaxControlToolkit.ReorderList.ItemCommand">
            <summary>
             All of our event handlers.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.AllowReorder">
            <summary>
            Specifies whether this control allows reorder.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.DataKeyField">
            <summary>
            The column name for the primary key field for this control to use
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.DataKeys">
            <summary>
            The indexed collection of data keys, one for each row, when databound.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.DataBindPending">
            <summary>
            Set to true when a reorder callback happens.  We check this on a 
            postback to see if we need to re-databind.        
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.DataSourceID">
            <summary>
            The ID of an IDataSource object to databind this list to.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.DragHandleAlignment">
            <summary>
            The handle alignment in relation to the item template.  
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.DragHandleTemplate">
            <summary>
            The template to use for the handle that a user can "grab" with the mouse and reorder
            the item.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.EmptyListTemplate">
            <summary>
            The template that will be shown when the list has no data
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.EditItemIndex">
            <summary>
            The index of the item that is currently in edit mode.  
            The default is -1, meaning no item is in edit mode.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.EditItemTemplate">
            <summary>
            The template do display when a row is in edit mode.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.ItemInsertLocation">
            <summary>
            Specifies where new items are added to the list: beginning or end.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.InsertItemTemplate">
            <summary>
            The template to display for adding new items.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.ItemTemplate">
            <summary>
            The template to display for rows in display mode.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.LayoutType">
            <summary>
            The type of layout to apply to the items.  If "Table" is selected, the 
            DragHandleAlignment property is used to lay out the items 
            in relation to the drag handle.  If not, the items are simply wrapped in Panel
            controls and can be positioned using CSS.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.SortOrderField">
            <summary>
            The name of the column which controls the sort order of the rows in the data base.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.ReorderTemplate">
            <summary>
            The template to use as the drop visual when the user is dragging an item around.  
            This template is not data bindable.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.ScriptResourceUrl">
            <summary>
            The resource URL to use for loading the script associated with this control.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.ShowInsertItem">
            <summary>
            Determines whether the InsertItem is shown.  If this value is not set and
            an InsertItemTemplate is set, this defaults to true.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderList.TagKey">
            <summary>
            This control renders a DIV
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.BulletedList">
            <summary>
            We create our own BulletedList because the ASP.NET one
            Takes ListItems rather than regular controls as it's children.
            </summary>
            
        </member>
        <member name="T:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1">
            <summary>
            Designer support for adding and navigating to page methods
            </summary>
            <summary>
            The designer here has two main jobs:
            
            1) Modifying the properties of the TargetProperties objects to remove the "TargetControlID" property and add the Control converter.
               We remove "TargetControlID" because the value will be hanging off of the target control's properties already so it's confusing/redundant.
            2) Modifying the name of the Extender property so it's user-configurable.
            
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.DisableDesignerFeaturesUnknown">
            <summary>
            Orcas implements their own extender designer features, so in that case we disable ours.        
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.CanExtend(System.Object)">
            <summary>
            Called to check if we can extend a given control.  We return true if the control has the same ID a
            our extender control target.
            </summary>
            <param name="targetControl"></param>
            <returns></returns>
        </member>
        <member name="P:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.ActionLists">
            <summary>
            Action lists including the PageMethodDesignerActionList
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.ExtenderControl">
            <summary>
            The ExtenderControl this designer is attached to.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.ExtenderPropertyName">
            <summary>
            The name of the ExtenderProperty that will appear in the properties of potential target controls.
            
            By default this is the name of the Extender (e.g. "TextBoxWatermarkExtender") but can be customized by overriding this property.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList">
            <summary>
            Action list for a page method
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList._signature">
            <summary>
            Method signature of the page method
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList._attribute">
            <summary>
            Attribute describing properties of the page method
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.#ctor(System.ComponentModel.IComponent,System.Reflection.MethodInfo,AjaxControlToolkit.Design.PageMethodSignatureAttribute)">
            <summary>
            Constructor
            </summary>
            <param name="component">Component the action list is associated with</param>
            <param name="signature">Method signature of the page method</param>
            <param name="attribute">Attribute describing properties of the page method</param>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.GetSortedActionItems">
            <summary>
            Add the page method
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.AddPageMethod">
            <summary>
            Add the code for the page method
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.EnsureService``1(``0@)">
            <summary>
            Get a valid reference to a required service
            </summary>
            <typeparam name="S">Type of the service</typeparam>
            <param name="service">Value of the service to be assigned</param>
            <returns>True if the service was found, false otherwise</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.ShowMessage(System.String)">
            <summary>
            Show a message
            </summary>
            <param name="message">Message</param>
            <param name="buttons">Buttons</param>
            <returns>Result</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.ShowMessage(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Show a message
            </summary>
            <param name="message">Message</param>
            <param name="buttons">Buttons</param>
            <returns>Result</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.FindClass(AjaxControlToolkit.Design.FileCodeModel2,System.String)">
            <summary>
            Find the CodeModel node for a given class
            </summary>
            <param name="model">FileCodeModel containing the class</param>
            <param name="name">Name of the class</param>
            <returns>CodeModel node for the class, or null if not found</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.FindMethods(AjaxControlToolkit.Design.CodeClass2,System.String)">
            <summary>
            Find all CodeFunctions that correspond to overloads of a method with a given name
            </summary>
            <param name="classModel">Class to search for the methods</param>
            <param name="name">Name of the methods</param>
            <returns>Array of CodeFunctions representing the method overloads defined in the class</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.FindMethod(AjaxControlToolkit.Design.CodeClass2,System.String,System.Reflection.MethodInfo)">
            <summary>
            Find a CodeFunction that corresponds to a specific overload of a method
            </summary>
            <param name="classModel">Class to search for the method</param>
            <param name="name">Name of the method</param>
            <param name="signature">Signature of the method</param>
            <returns>The CodeFunction representing the method if found, null if not found</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.CreateCodeTypeRefName(System.Type)">
            <summary>
            Convert a type's name into a valid CodeTypeRef name
            </summary>
            <param name="t">Type</param>
            <returns>Name</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.AreSameType(AjaxControlToolkit.Design.CodeTypeRef,System.Type)">
            <summary>
            Determine whether a CodeTypeRef is describing a particular type
            </summary>
            <param name="modelType">CodeTypeRef</param>
            <param name="type">Type</param>
            <returns>True if they're describing the same type, false otherwise</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.CreatePageMethod(AjaxControlToolkit.Design.CodeClass2,System.String)">
            <summary>
            Create the page method
            </summary>
            <param name="classModel">Class to contain the method</param>
            <param name="name">Name of the method</param>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.PageMethodNeedsRepair(AjaxControlToolkit.Design.CodeFunction2)">
            <summary>
            Check if an existing page method needs repair
            </summary>
            <param name="method">Method to check</param>
            <returns>Whether or not the page method needs repair</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.RepairPageMethod(AjaxControlToolkit.Design.CodeFunction2)">
            <summary>
            Repair the page method
            </summary>
            <param name="method">Method to repair</param>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.LoadFileCodeModel(AjaxControlToolkit.Design.ProjectItem)">
            <summary>
            Load the FileCodeModel associated with a web project item
            </summary>
            <param name="projectItem">Active ProjectItem</param>
            <returns>FileCodeModel</returns>
        </member>
        <member name="M:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.PageMethodDesignerActionList.UnloadWebProjectItem(AjaxControlToolkit.Design.ProjectItem)">
            <summary>
            Unload the WebProjectItem if it was loaded
            </summary>
            <param name="projectItem">Active ProjectItem</param>
        </member>
        <member name="T:AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1.ExtenderPropertyRenameDescProv">
            <summary>
            This provider allows us to rename the extender provided property
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1">
            <summary>
            This class allows the filtering/replacement of properties from the default list of properties.
            
            We use this to modify the name of the ExtenderProperty on-demand
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Intercept the call to GetTypeDescriptor and return ourselves if appropriate
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1.GetExtendedTypeDescriptor(System.Object)">
            <summary>
            Intercept the call to GetExtendedTypeDescriptor and return ourselves if appropriate
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1.ProcessProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            To be handled in derived class - this method takes a given property and modifies
            it if necessary.  The result will be pushed back into the original property list, 
            replacing the original PropertyDescriptor.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1.Target">
            <summary>
            The object we are wrapping.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1.BaseDescriptor">
            <summary>
            The default type descriptor for this type.  We delegate most calls to this.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1.FilterExtendedProperties">
            <summary>
            True to filter extender properties, otherwise false.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ExtenderControlBase">
            <summary>
            This is the main class for extenders.  It has several main jobs:
            
            1) It performs the hookup between an Extender (server) control and the behavior it instantiates
            2) It manages interacting with the ScriptManager to get the right scripts loaded
            3) It adds some debugging features like ValidationScript and ScriptPath
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="C"></typeparam>
            
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.EnsureScripts">
            <summary>
            Walks the various script types and prepares to notify the ScriptManager to load them.
            1) Required scripts such as ASP.NET AJAX Scripts or other components
            2) Scripts for this Extender/Behavior
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.FindControlHelper(System.String)">
            <summary>
            This helper automates locating a control by ID.
            
            It calls FindControl on the NamingContainer, then the Page.  If that fails,
            it fires the resolve event.
            </summary>
            <param name="id">The ID of the control to find</param>
            <param name="props">The TargetProperties class associated with that control</param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.GetClientID(System.String)">
            <summary>
            Gets the ClientID for a given control, based on it's ID
            </summary>
            <param name="controlId">The ID of the Control</param>
            <param name="props">The associated TargetProperties object</param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.GetClientStateFieldID">
            <summary>
            Helper to generate a clientState ID
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.OnInit(System.EventArgs)">
            <summary>
            On Init we load target properties values and process data-binding handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.Page_PreLoad(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Page.PreLoad event
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.OnLoad(System.EventArgs)">
            <summary>
            Override OnLoad to call LoadClientStateValues if it hasn't already been called
            </summary>
            <remarks>
            This can be the case if an extender is within a template - the page lifecycle
            catch-up seems to take place after Page.PreLoad has already fired
            </remarks>
            <param name="e">event args</param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.CreateClientStateField">
            <summary>
            This creates the field for any client state and sets up
            it's name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.LoadClientStateValues">
            <summary>
            Loads the values for each of the TargetProperties classes coming back from a postback.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.OnResolveControlID(AjaxControlToolkit.ResolveControlEventArgs)">
            <summary>
            Fired when the extender can not locate it's target control. This may happen if the target control is in a different naming container.
            By handling this event, user code can locate the target and return it via the ResolveControlEventArgs.Control property.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.RenderInnerScript(System.Web.UI.ScriptBehaviorDescriptor)">
            <summary>
            Allows generation of markup within the behavior declaration in XML script
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.RenderScriptAttributes(System.Web.UI.ScriptBehaviorDescriptor)">
            <summary>
            Walks each of the properties in the TargetProperties object and renders script for them.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.SaveClientStateValues">
            <summary>
            Save any values in the TargetProperties objects out to client state so they are available
            on the client side.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.SerializeProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Serializes a single property value out to it's string representation.
            </summary>
            <param name="props">The TargetProperties object</param>
            <param name="prop">The property</param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.SerializeProperty(System.ComponentModel.PropertyDescriptor,System.Boolean)">
            <summary>
            Serializes a given property's value to a string.  This method owns checking
            that the property should actually be serialized, as well as doing the work
            to convert the value to a string using the appropriate TypeConverter.
            </summary>
            <param name="force">True to force serialization</param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.SuppressUnusedParameterWarning(System.Object)">
            <summary>
            Suppresses the "unused parameter" warning of code analysis for cases
            where a parameter is deliberately unused
            </summary>
            <param name="unused">unused parameter</param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.CheckIfValid(System.Boolean)">
            <summary>
            Checks if all properties are valid
            </summary>
            <param name="throwException">true iff an exception is to be thrown for invalid parameters</param>
            <returns>true iff all parameters are valid</returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlBase.EnsureValid">
            <summary>
            Called during rendering to give derived classes a chance to validate their properties
            </summary>
            <remarks>
            If the properties aren't valid, an exception of type ArgumentException should be thrown
            </remarks>
        </member>
        <member name="E:AjaxControlToolkit.ExtenderControlBase.ResolveControlID">
            <summary>
            Called when the ExtenderControlBase fails to locate a control referenced by a TargetControlID.
            In this event, user code is given an opportunity to find the control.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlBase.AllowScriptPath">
            <summary>
            For debugging - set this to false if you don't want people being able to specify a script path
            to redirect the script loading for the extender.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlBase.ClientControlType">
            <summary>
            The type of the client component - e.g. "ConfirmButtonBehavior"
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlBase.IsRenderingScript">
            <summary>
            Property for determining if script rendering is currently underway.  This is used to determine
            if Script or markup is being rendered.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlBase.ScriptPath">
            <summary>
            For debugging - setting this causes the extender to load the specified script instead of the one out of the resources.  This
            lets you set breakpoints and modify the script without rebuilding, etc.
            </summary>
        </member>
        <member name="E:AjaxControlToolkit.ExtenderControlBase.ClientStateValuesLoaded">
            <summary>
            Fired when the ClientState values have been loaded from the page
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.ToolbarButton.CommonButton.#ctor(System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Initializes a new CommonButton
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.ToolbarButton.ImageButton.#ctor">
            <summary>
            Initializes a new ImageButton
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.ToolbarButton.SelectButton.#ctor">
            <summary>
            Initializes a new SelectButton
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ProfilePropertyBindingCollection">
            <summary>
            Basic collection of ProfilePropertyBindings.
            
            We need a special collection here to do notification back to the owning object so that
            the designer knows when things changed.
            
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.SlideShowExtender">
            <summary>
            
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.SlideShowServiceMethod">
            <summary>
            The webservice method that will be called to supply images. 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.SlideShowServicePath">
            <summary>
            Path to the webservice that the extender will pull the images from.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.ContextKey">
            <summary>
            User/page specific context provided to an optional overload of the
            web method described by ServiceMethod/ServicePath.  If the context
            key is used, it should have the same signature with an additional
            parameter named contextKey of type string.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.UseContextKey">
            <summary>
            Whether or not the ContextKey property should be used.  This will be
            automatically enabled if the ContextKey property is ever set
            (on either the client or the server).  If the context key is used,
            it should have the same signature with an additional parameter
            named contextKey of type string.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.NextButtonID">
            <summary>
            ID of the control that will move the slide show to the next slide.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.PlayButtonID">
            <summary>
            ID of the control that will play the slide show.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.PlayButtonText">
            <summary>
            Text to display in the play button if the slide show is not playing.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.StopButtonText">
            <summary>
            Text to display in the play button if the slide show is in play mode.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.PlayInterval">
            <summary>
            Interval in milliseconds before switching to the next slide is playing.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.ImageTitleLabelID">
            <summary>
            ID of the label that will display the current slide's title.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.ImageDescriptionLabelID">
            <summary>
            ID of the label that will display the current slide's description.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.PreviousButtonID">
            <summary>
            ID of the control that will move the slide show to the previous slide.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.Loop">
            <summary>
            Boolean to determine if the slide show loops around if you hit the first or last slide.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SlideShowExtender.AutoPlay">
            <summary>
            Boolean to determine if the slide show will play automatically on render.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ListSearchExtender">
            <summary>
            ListSearch extender class definition
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AnimationExtenderControlBase">
            <summary>
            Extender that provides support for generic animations.  It includes an Animations
            property that will be filled with the markup for all of its child Animations.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AnimationExtenderControlBase.TrimForDesigner(System.String)">
            <summary>
            We have to trim the Animations string that we expose in the designer
            or else it will end up inserting a new blank line at the top of the
            string every time we make a change.  However, we only want to trim the
            blank lines off the top and leave any other leading whitespace on the
            line with the first content.  For an example of what happens if we
            don't do this, change the XmlDataSource.Data property in the designer.
            </summary>
            <param name="value">String to trim</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:AjaxControlToolkit.AnimationExtenderControlBase.ShouldSerializeAnimations">
            <summary>
            This will prevent serializing the Animations property to the Xml-Script
            </summary>
            <returns>True when we have content in DesignMode, false otherwise</returns>
        </member>
        <member name="M:AjaxControlToolkit.AnimationExtenderControlBase.GetAnimation(AjaxControlToolkit.Animation@,System.String)">
            <summary>
            Get an animation (which is a helper for Animation properties in other extenders)
            </summary>
            <param name="animation">Animation instance</param>
            <param name="name">Name of the property</param>
            <returns>Animation instance</returns>
        </member>
        <member name="M:AjaxControlToolkit.AnimationExtenderControlBase.SetAnimation(AjaxControlToolkit.Animation@,System.String,AjaxControlToolkit.Animation)">
            <summary>
            Set an animation (which is a helper for Animation properties in other extenders)
            </summary>
            <param name="animation">Animation instance</param>
            <param name="name">Name of the property</param>
            <param name="value">New value</param>
        </member>
        <member name="M:AjaxControlToolkit.AnimationExtenderControlBase.ResolveControlIDs(AjaxControlToolkit.Animation)">
            <summary>
            Change any AnimationTarget references from server control IDs into the ClientIDs
            that the animation scripts are expecting.
            </summary>
            <param name="animation">Animation</param>
        </member>
        <member name="P:AjaxControlToolkit.AnimationExtenderControlBase.Animations">
            <summary>
            Sequence of animation descriptions
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ListSearchExtender.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ListSearchExtender.OnLoad(System.EventArgs)">
            <summary>
            OnLoad checks to see if it's focused by default
            </summary>
            <param name="e">arguments</param>
        </member>
        <member name="M:AjaxControlToolkit.ListSearchExtender.OnPreRender(System.EventArgs)">
            <summary>
            Convert server IDs into ClientIDs for animations
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.PromptText">
             <summary>
            The prompt text displayed when user clicks the list.
             </summary>
             <value>The prompt text.</value>        
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.PromptCssClass">
            <summary>
            CSS class applied to prompt when user clicks list.
            </summary>
            <value>The prompt CSS class.</value>
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.PromptPosition">
            <summary>
            Indicates where you want the prompt message displayed when the user clicks on the list.
            </summary>
            <value>The prompt position.</value>
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.OnShow">
            <summary>
            OnShow animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.OnHide">
            <summary>
            OnHide animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.QueryTimeout">
            <summary>
            The timeout in milliseconds after which search query will be cleared.
            </summary>
            <value>The query timeout in milliseconds.</value> 
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.QueryPattern">
            <summary>
            Indicates search query pattern to be used to find items.
            </summary>
            <value>The search pattern type.</value>
        </member>
        <member name="P:AjaxControlToolkit.ListSearchExtender.IsSorted">
            <summary>
            When setting this to true, we instruct search routines that
            all values in List are already sorted on population,
            so binary search can be used if on StartsWith criteria
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.HoverMenuDesigner.GetDynamicContent">
            <summary>
            Signature of the page method for DynamicPopulateExtenderControlBase's web
            service that is used to support adding/navigating to the page method from
            the designer
            </summary>
            <param name="contextKey">User specific context</param>
            <returns>Dynamically generated content</returns>
        </member>
        <member name="T:AjaxControlToolkit.Design.PageMethodSignatureAttribute">
            <summary>
            The PageMethodSignature attribute is used by Designer classes for Toolkit
            components that include web services.  It decorates a delegate that describes
            the signature of the web method.  The ExtenderControlBaseDesigner will
            automatically add a DesignerActionItem for each of the page methods on the
            component.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Design.PageMethodSignatureAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="friendlyName">Friendly name of the page method</param>
            <param name="servicePathProperty">Name of the ServicePath property</param>
            <param name="serviceMethodProperty">Name of the ServiceMethod property</param>
        </member>
        <member name="M:AjaxControlToolkit.Design.PageMethodSignatureAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="friendlyName">Friendly name of the page method</param>
            <param name="servicePathProperty">Name of the ServicePath property</param>
            <param name="serviceMethodProperty">Name of the ServiceMethod property</param>
            <param name="useContextKeyProperty">Name of the UseContextKey property</param>
        </member>
        <member name="P:AjaxControlToolkit.Design.PageMethodSignatureAttribute.FriendlyName">
            <summary>
            Friendly name of the page method displayed in the designer
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.PageMethodSignatureAttribute.ServicePathProperty">
            <summary>
            Name of the ServicePath property (to verify that the component isn't
            using a non-page method)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.PageMethodSignatureAttribute.ServiceMethodProperty">
            <summary>
            Name of the ServiceMethod property which will be used to set the name
            of the page method, or navigate/repair an existing page method
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Design.PageMethodSignatureAttribute.UseContextKeyProperty">
            <summary>
            Name of the UseContextKey property (which will be set to true if
            specified).  The corresponding contextKey parameter should be included
            with the signature but will not be set on the extender.
            </summary>
            <remarks>
            A few components in the Toolkit have an optional second signature
            to support using a ContextKey property.  Ideally they would have had
            the ContextKey property from the beginning, but we didn't want to
            break existing customers.  This should not be used by most components.
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.Design.PageMethodSignatureAttribute.IncludeContextParameter">
            <summary>
            Whether the UseContextKeyProperty has been specified
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Design.ExtenderPropertiesProxy">
            <summary>
            This class allows us to selectively hide properties on an object
            from the property browser, as well as to delay supplying a target until it's 
            called for.  This allows us to create the properties object on-demand rather than
            needing it up front.
                   
            </summary>
                    
        </member>
        <member name="T:AjaxControlToolkit.ClientScriptResourceAttribute">
            <summary>
            Associates a client script resource with an extender class.
            This allows the extender to find it's associated script and what
            names and prefixes with which to reference it.
            </summary>
            
        </member>
        <member name="M:AjaxControlToolkit.ClientScriptResourceAttribute.#ctor(System.String)">
            <summary>
            Called from other constructors to set the prefix and the name.
            </summary>
            <param name="componentType">The name given to the class in the Web.TypeDescriptor.addType call</param>        
        </member>
        <member name="M:AjaxControlToolkit.ClientScriptResourceAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Associates a client script resource with the class.
            </summary>
            <param name="componentType">The name given to the class in the Web.TypeDescriptor.addType call</param>
            <param name="baseType">A Type that lives in the same folder as the script file</param>
            <param name="resourceName">The name of the script file itself (e.g. 'foo.cs')</param>
        </member>
        <member name="M:AjaxControlToolkit.ClientScriptResourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Associates a client script resource with the class.
            </summary>
            <param name="componentType">The name given to the class in the Web.TypeDescriptor.addType call</param>
            <param name="fullResourceName">The name of the script resource, e.g. 'ControlLibrary1.FooExtender.Foo.js'</param>       
        </member>
        <!-- Badly formed XML comment ignored for member "P:AjaxControlToolkit.ClientScriptResourceAttribute.ComponentType" -->
        <member name="P:AjaxControlToolkit.ClientScriptResourceAttribute.ResourcePath">
            <summary>
            This is the path to the resource in the assembly.  This is usually defined as
            [default namespace].[Folder name].FileName.  In a project called "ControlLibrary1", a
            JScript file called Foo.js in the "Script" subdirectory would be named "ControlLibrary1.Script.Foo.js" by default.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ConfirmButtonExtender">
            <summary>
            ConfirmButton extender class definition
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ConfirmButtonExtender.OnLoad(System.EventArgs)">
            <summary>
            OnLoad override
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:AjaxControlToolkit.ConfirmButtonExtender.RegisterDisplayModalPopup">
            <summary>
            Registers the target of DisplayModalPopupID for use with ConfirmButton
            </summary>
            <remarks>
            Called in OnLoad by default, but can be called later if the ModalPopup/ConfirmButton are created dynamically.
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ConfirmButtonExtender.ConfirmText">
            <summary>
            Text to display in the confirm dialog
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ConfirmButtonExtender.OnClientCancel">
            <summary>
            Gets or sets the client-side script that executes when the cancel button is clicked on the confirm dialog.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ConfirmButtonExtender.ConfirmOnFormSubmit">
            <summary>
            True iff the confirm dialog should run for form submission (i.e., after validators are all satisfied)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ConfirmButtonExtender.DisplayModalPopupID">
            <summary>
            Specifies the ID of a pre-configured ModalPopupExtender to use in place of window.confirm
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ConfirmButtonExtender.PostBackScript">
            <summary>
            Specifies the script to run to initiate a postback
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUpload">
            <summary>
            AsyncFileUpload enables you to you asynchronously upload files to a server. The results of the file upload can be checked both in the server and client sides. 
            
            You can save the uploaded file by calling the SaveAs() method in a handler for the server UploadedComplete event.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.#ctor">
            <summary>
            Initializes a new AsyncFileUpload.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.ClearAllFilesFromPersistedStore">
            <summary>
            Removes all files from the storage provider.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.ClearFileFromPersistedStore">
            <summary>
            Removes a particular file from the storage provider.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.SaveAs(System.String)">
            <summary>
            Saves the uploaded file with a particular file name.
            </summary>
            <param name="fileName">file name at server.</param>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.PopulatObjectPriorToRender(System.String)">
            <summary>
            PopulateObjectPriorToRender passes the file to upload 
            if file is already not in request to upload and uploadable file is in request.          
            </summary>
            <param name="controlId">Id of AsyncFileUpload.</param>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.OnUploadedFileError(AjaxControlToolkit.AsyncFileUploadEventArgs)">
            <summary>
            OnUploadedFileError execute the event attached to UploadedFileError
            When error occurs during file upload.
            </summary>
            <param name="e">Arguments containing information of uploadable file.</param>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.OnUploadedComplete(AjaxControlToolkit.AsyncFileUploadEventArgs)">
            <summary>
            OnUploadedComplete execute the event attached to UploadedFileComplete
            after the file uploaded successfully.
            </summary>
            <param name="e">Arguments containing information of uploadable file.</param>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.ReceivedFile(System.String)">
            <summary>
            ReceivedFile takes the file from request for upload, creates AsyncFileUploadEventArgs and calls to OnUploadError/OnUploadComplete events.
            </summary>
            <param name="sendingControlID">Id of AsyncFileUpload.</param>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.GetBytesFromStream(System.IO.Stream)">
            <summary>
            Retrieves an array of bytes from a file stream.
            </summary>
            <param name="stream">stream containg file contents.</param>
            <returns>Array of bytes of contents of requested file.</returns>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.OnPreRender(System.EventArgs)">
            <summary>
            OnPreRender renders the output of result to client side.        
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.CreateChilds">
            <summary>
            CreateChilds call to create child controls for asyncfileupload.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.CreateChildControls">
            <summary>
            CreateChildControls creates html controls for a asyncFileUpload control.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.GenerateHtmlInputHiddenControl">
            <summary>
            GenerateHtmlInputHiddenControl creates a html hidden control for AsyncFileUpload control.
            </summary>
            <returns>returns if of newly created hidden control.</returns>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.GenerateHtmlInputFileControl(System.String)">
            <summary>
            GenerateHtmlInputFileControl creates input file control for AsyncFileUpload control.
            </summary>
            <param name="lastFileName">Name of Posted file.</param>
            <returns>Return the client id of parent div that contains all other html controls.</returns>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.DescribeComponent(System.Web.UI.ScriptComponentDescriptor)">
            <summary>
            DescribeComponent creates propreties in ScriptComponentDescriptor for child controls in asyncFileUpload
            </summary>
            <param name="descriptor">Descriptor object which will accpet server components to convert in client script.</param>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.CreateControlStyle">
            <summary>
            CreateControlStyle creates object of style for AsyncFileUpload control.
            </summary>
            <returns>Style object.</returns>
        </member>
        <member name="E:AjaxControlToolkit.AsyncFileUpload.UploadedComplete">
            <summary>
            Event to raise on the server when the file is uploaded successfully.
            </summary>
        </member>
        <member name="E:AjaxControlToolkit.AsyncFileUpload.UploadedFileError">
            <summary>
            Event to raise on the server when the file is corrupted.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.OnClientUploadStarted">
            <summary>
            Gets or sets the client script that executes when a file upload starts.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.OnClientUploadComplete">
            <summary>
            Gets or sets the client script that executes when a file upload completes.
            </summary>                
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.OnClientUploadError">
            <summary>
            Gets or sets the client script that executes when a file upload error occurs.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.IsDesignMode">
            <summary>
            Gets whether control is in design mode or not.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.CurrentFile">
            <summary>
            Gets the reference of current posted file.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.FileBytes">
            <summary>
            Gets an array of the bytes in the file being uploaded.
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.ThrobberID">
            <summary>
            Gets or sets the ID of a control that is displayed while the file is being uploaded.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.CompleteBackColor">
            <summary>
            Gets or sets the control's background color when the file is uploaded.
            The default value is Lime
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.UploadingBackColor">
            <summary>
            Gets or sets the control's background color while the file is
            in the process of being uploaded.
            The default value is White.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.ErrorBackColor">
            <summary>
            Gets or sets the control's background color when there is an upload error. 
            The default value is Red
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.Width">
            <summary>
            Gets or sets the control's width.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.FailedValidation">
            <summary>
            Gets or Sets the status of validation failed.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.PersistedStoreType">
            <summary>
            Gets or sets the storage provider for the control.
            The default is value is Session.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.UploaderStyle">
            <summary>
            Gets or sets the control's appearance (Traditional, Modern).
            The default value is Traditional
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.PostedFile">
            <summary>
            Gets an HttpPostedFile object that provides access to the uploaded file.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.HasFile">
            <summary>
            Returns true when a file has been uploaded.
            Else returns false.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.FileName">
            <summary>
            Gets the file name of the uploaded file.
            Else returns empty string.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.ContentType">
            <summary>
            Gets the Type of contents of the uploaded file.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.FileContent">
            <summary>
            Gets a Stream object that points to an uploaded file to prepare for reading the contents of the file.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.IsUploading">
            <summary>
            Returns true when the file is in the process of being uploaded.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUpload.PersistFile">
            <summary>
            Gets or sets the status whether file is persisted or not.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUpload.Constants">
            <summary>
            Constants to keep static string values. These values will be used by classes to upload file asynchronously.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUpload.Constants.Errors">
            <summary>
            Errors to keep user friendly error messages. These error messages will be displayed to end user if any error occurs during the file upload.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUpload.Constants.StatusMessages">
            <summary>
            StatusMessages keep state message that will be displayed after file is uploaded at server.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUpload.UploaderStyleEnum">
            <summary>
            UploaderStyleEnum represents available apprearance styles for AsyncFileUpload (Traditional, Modern). 
            Default value is Traditional.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUpload.PersistedStoreTypeEnum">
            <summary>
            Store type to persist values (Session). Currently asyncFileUpload persist values in session only.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUpload.AsyncFileUploadStyle">
            <summary>
            AsyncFileUploadStyle sets css attributes for the AsyncFileUpload control.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUpload.AsyncFileUploadStyle.FillStyleAttributes(System.Web.UI.CssStyleCollection,System.Web.UI.IUrlResolutionService)">
            <summary>
            FillStyleAttributes sets the css atrribute for asyncFileUpload.
            </summary>
            <param name="attributes">css attributes</param>
            <param name="urlResolver">object of IUrlResolutionService</param>
        </member>
        <member name="T:AjaxControlToolkit.TextBoxWatermarkExtender">
            <summary>
            TextBoxWatermark extender class definition
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.TextBoxWatermarkExtender.OnLoad(System.EventArgs)">
            <summary>
            OnLoad override to register a submit script for each TextBoxWatermark behavior as well as check
            to see if it's focused by default
            </summary>
            <param name="e">arguments</param>
        </member>
        <member name="P:AjaxControlToolkit.TextBoxWatermarkExtender.WatermarkText">
            <summary>
            Text to place in the control when watermarked
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.TextBoxWatermarkExtender.WatermarkCssClass">
            <summary>
            CSS class to apply to the control when watermarked
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderListDesigner">
            <summary>
            The designer class for the ReorderList.  It's main job in life is to display the
            various edit modes for the templates as well as the dropdown in the DesignerActionList.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderListDesigner.GetEmptyDesignTimeHtml">
            <!-- Failed to insert some or all of included XML --><include file="doc\ReorderListDesigner.uex" path="docs/doc[@for=&quot;ReorderListDesigner.GetEmptyDesignTimeHtml&quot;]/*"/>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListDesigner.ActionLists">
            <!-- Failed to insert some or all of included XML --><include file="doc\ReorderListDesigner.uex" path="docs/doc[@for=&quot;ReorderListDesigner.ActionLists&quot;]/*"/>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Popups.PopupCommonButton.#ctor(System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Initializes a new PopupCommonButton
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CalendarExtender">
            <summary>
            The Calendar control extender can be attached to any ASP.NET TextBox control. It provides client-side 
            date-picking functionality with customizable date format and UI in a popup control. You can interact 
            with the calendar by clicking on a day to set the date, or the "Today" link to set the current date. 
            
            In addition, the left and right arrows can be used to move forward or back a month. 
            By clicking on the title of the calendar you can change the view from Days in the current month, 
            to Months in the current year. Another click will switch to Years in the current Decade. 
            This action allows you to easily jump to dates in the past or the future from within 
            the calendar control. 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.CssClass">
            <summary>
            Name of the Cascading Style Sheet class used to style the calendar 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.Format">
            <summary>
            Format string used to display the selected date. The default value is "d"
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.TodaysDateFormat">
            <summary>
            Format string used to display today's date. The default value is "MMMM d, yyyy"
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.DaysModeTitleFormat">
            <summary>
            Format string used to display Days Mode Title. The default value is "MMMM, yyyy"
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.ClearTime">
            <summary>
            Whether time should be cleared in edited date/time
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.EnabledOnClient">
            <summary>
            Whether this behavior is available for the current element
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.Animated">
            <summary>
            Whether changing modes is animated
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.FirstDayOfWeek">
            <summary>
            Gets or sets the first day of week
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.PopupButtonID">
            <summary>
            The ID of a control to show the calendar popup when clicked. If this value is not set, the calendar will pop up when the textbox receives focus
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.PopupPosition">
            <summary>
            Gets or sets the popup position of the calendar. The default value is BottomLeft
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.SelectedDate">
            <summary>
            Gets or sets the date that the calendar is initialized with
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.DefaultView">
            <summary>
            Gets or sets the default view of the calender. The default value is Days.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.OnClientShowing">
            <summary>
            Gets or sets the client script that executes immediately before the calendar is displayed
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.OnClientShown">
            <summary>
            Gets or sets the client script that executes immediately after the calendar is displayed
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.OnClientHiding">
            <summary>
            Gets or sets the client script that executes immediately before the calendar is hidden
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.OnClientHidden">
            <summary>
            Gets or sets the client script that executes immediately after the calendar is hidden
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CalendarExtender.OnClientDateSelectionChanged">
            <summary>
            Gets or sets the script that executes when a new date is selected
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionPane">
            <summary>
            The AccordionPane control represents a child header/content pair
            of the AccordionControl.
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPane._header">
            <summary>
            Header Container
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPane._headerTemplate">
            <summary>
            Header Template
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPane._content">
            <summary>
            Content Container
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPane._contentTemplate">
            <summary>
            Content Template
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPane.CreateChildControls">
            <summary>
            Instantiate the templates into new child controls
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPane.FindControl(System.String)">
            <summary>
            Override FindControl to look first at this control, then the HeaderContainer,
            and finally the ContentContainer when searching for controls
            </summary>
            <param name="id">ID of the control</param>
            <returns>Control</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPane.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Prevent the opening tag of the control from being rendered
            </summary>
            <param name="writer">HtmlTextWriter</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPane.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Prevent the closing tag of the control from being rendered
            </summary>
            <param name="writer">HtmlTextWriter</param>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPane.HeaderContainer">
            <summary>
            Header Container
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPane.HeaderCssClass">
            <summary>
            Header CSS Class
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPane.Header">
            <summary>
            Header Template
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPane.ContentContainer">
            <summary>
            Content Container
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPane.ContentCssClass">
            <summary>
            Content CSS Class
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPane.Content">
            <summary>
            Content Template
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPane.Controls">
            <summary>
            Wrap the Controls collection to always ensure they have
            been generated before they're accessed
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionDesigner">
            <summary>
            Simple read-only designer for the Accordion control
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionDesigner._accordion">
            <summary>
            Reference to the Accordion control we're designing
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionDesigner.#ctor">
            <summary>
            Initializes a new instances of the AccordionDesigner class
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initialize to make sure we're attached to an accordion control
            </summary>
            <param name="component">Component</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionDesigner.GetDesignTimeHtml">
            <summary>
            Get the HTML for the Accordion
            </summary>
            <returns>HTML design time representation</returns>
        </member>
        <member name="T:AjaxControlToolkit.AccordionCommandEventArgs">
            <summary>
            The AccordionCommandEventArgs provides access to the container
            AccordionContentPanel for data commands
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionCommandEventArgs._container">
            <summary>
            Container
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionCommandEventArgs.#ctor(AjaxControlToolkit.AccordionContentPanel,System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="container">Container</param>
            <param name="commandName">Command Name</param>
            <param name="commandArg">Command Argument</param>
        </member>
        <member name="P:AjaxControlToolkit.AccordionCommandEventArgs.Container">
            <summary>
            Container
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderListItemCollection">
            <summary>
            Basica collection of ReorderListItems.  This just calls through to the parent's list.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DropWatcherExtender">
            <summary>
            The extender which attaches the DropWatcherBehavior to our list element.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DropWatcherExtender.AcceptedDataTypes">
            <summary>
            Passthrough to the acceptedDataTypes property of the dragDropList.  Value is always
            'HTML' but the property needs to be r/w to be serialized.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DropWatcherExtender.ArgReplaceString">
            <summary>
            The string that is placed in the postBackCode that should be replaced for argument values.
            </summary>
            
        </member>
        <member name="P:AjaxControlToolkit.DropWatcherExtender.DataType">
            <summary>
            Passthrough to the dragDropList.  Always "HTML" but needs to be r/w for the serializer to see it.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DropWatcherExtender.DragMode">
            <summary>
            Passthrough to the dragDropList.  Always "Move" but needs to be r/w for the serializer to see it.
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.DropWatcherExtender.DropLayoutElement">
            <summary>
            The element that will be shown as the "you can drop here" visual when an item is 
            being reordered.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DropWatcherExtender.PostBackCode">
            <summary>
            The postback code string to be fired when a drop occurs on the client side, including
            the argReplaceString which will be replaced by the index of the item that's being moved.
            </summary>
                    
        </member>
        <member name="M:AjaxControlToolkit.NoBot.#ctor">
            <summary>
            Set the html tag to be div instead of the default span to be xhtml compliant
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.MultiHandleSliderExtender">
            <summary>
            A multi-handled slider allowing selection of multiple point values on a graphical rail.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.MultiHandleSliderExtender.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:AjaxControlToolkit.MultiHandleSliderExtender"/>.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.Minimum">
            <summary>
            The lowest value on the slider.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.Maximum">
            <summary>
            The highest value on the slider.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.Length">
            <summary>
            The length of the slider rail in pixels.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.Steps">
            <summary>
            Determines number of discrete locations on the slider; otherwise, the slider is continous.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.ShowInnerRail">
            <summary>
            Determines if the slider will show an inner selected range rail; otherwise, it will display as a uniform rail.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.InnerRailStyle">
            <summary>
            Determines how the inner rail style is handled.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.Orientation">
            <summary>
            Determines if the slider's orientation is horizontal or vertical.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.RaiseChangeOnlyOnMouseUp">
            <summary>
            Determines if changes to the slider's values are raised as an event when dragging; otherwise, they are raised on drag end.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.EnableInnerRangeDrag">
            <summary>
            Determines if the inner rail range can be dragged as a whole, moving both handles defining it.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.EnableRailClick">
            <summary>
            Determines if clicking on the rail will detect and move the closest handle.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.IsReadOnly">
            <summary>
            Determines if the slider and its values can be manipulated.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.EnableKeyboard">
            <summary>
            Determines if the slider will respond to arrow keys when it has focus.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.EnableMouseWheel">
            <summary>
            Determines if the slider will respond to the mouse wheel when it has focus.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.Increment">
            <summary>
            Determines the number of points to increment or decrement the slider using the keyboard or mousewheel; ignored if steps is used.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.MultiHandleSliderTargets">
            <summary>
            The list of controls used to bind slider handle values. These should be <see cref="T:System.Web.UI.WebControls.Label"/> or <see cref="T:System.Web.UI.WebControls.TextBox"/> controls.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.EnableHandleAnimation">
            <summary>
            Determines if the slider handles display an animation effect when changing position.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.ShowHandleHoverStyle">
            <summary>
            Determines if the slider handles will show a style effect when they are hovered over.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.ShowHandleDragStyle">
            <summary>
            Determines if the slider handles will show a style effect when they are being dragged.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.HandleAnimationDuration">
            <summary>
            Determines the total duration of the animation effect, in seconds.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.TooltipText">
            <summary>
            Determines the text to display as the tooltip; {0} denotes the current handle's value in the format string.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.CssClass">
            <summary>
            The master style to apply to slider graphical elements.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.OnClientLoad">
            <summary>
            The event raised when the slider is completely loaded on the page.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.OnClientDragStart">
            <summary>
            The event raised when the user initiates a drag operation on the slider.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.OnClientDrag">
            <summary>
            The event raised when the user drags the slider.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.OnClientDragEnd">
            <summary>
            The event raised when the user drops the slider.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.OnClientValueChanged">
            <summary>
            The event raised when the slider changes its state.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.BoundControlID">
            <summary>
            Gets or sets the ID of a control to use for a single handle. Only
            used as a backwards compatibility feature for users wishing to upgrade
            their existing <see cref="T:AjaxControlToolkit.SliderExtender"/> controls.
            </summary>
            <remarks>
            The server control should be a TextBox or Label control.
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.Decimals">
            <summary>
            Get/Set the number of decimal digits in a single slider's value. A value 
            of 0 means an integer value.  Only
            used as a backwards compatibility feature for users wishing to upgrade
            their existing <see cref="T:AjaxControlToolkit.SliderExtender"/> controls.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.HandleCssClass">
            <summary>
            Gets or sets the CSS class of a single handle. Only
            used as a backwards compatibility feature for users wishing to upgrade
            their existing <see cref="T:AjaxControlToolkit.SliderExtender"/> controls.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.RailCssClass">
            <summary>
            Gets or set the CSS class for the slider's rail element. Only
            used as a backwards compatibility feature for users wishing to upgrade
            their existing <see cref="T:AjaxControlToolkit.SliderExtender"/> controls.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderExtender.HandleImageUrl">
            <summary>
            Gets or sets the URL for the image to display in the slider's handle. Only
            used as a backwards compatibility feature for users wishing to upgrade
            their existing <see cref="T:AjaxControlToolkit.SliderExtender"/> controls.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ModalPopupRepositionMode">
            <summary>
            The repositioning modes for ModalPopup.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Popups.Popup.#ctor">
            <summary>
            Initializes a new Popup
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.EditPanel.#ctor">
            <summary>
            Initializes a new EditPanel
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Editor.#ctor">
            <summary>
            Initializes a new Editor
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.ModePanel.#ctor(System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Initializes a new ModePanel
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.DesignPanel.#ctor">
            <summary>
            Initializes a new DesignPanel
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ClientPropertyNameAttribute">
            <summary>
            Allows the mapping of a property declared in managed code to a property
            declared in client script.  For example, if the client script property is named "handle" and you
            prefer the name on the TargetProperties object to be "Handle", you would apply this attribute with the value "handle."
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ClientPropertyNameAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the ClientPropertyNameAttribute and initializes
            the PropertyName value.
            </summary>
            <param name="propertyName">The name of the property in client script that you wish to map to.</param>
        </member>
        <member name="P:AjaxControlToolkit.ClientPropertyNameAttribute.PropertyName">
            <summary>
            The name of the property in client script code that you wish to map to.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AutoCompleteExtender">
            <summary>
            Extender that provides suggestions to fill input in a textbox.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AutoCompleteExtender.OnPreRender(System.EventArgs)">
            <summary>
            Convert server IDs into ClientIDs for animations
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AutoCompleteExtender.CreateAutoCompleteItem(System.String,System.String)">
            <summary>
            Create a serialized JSON object representing a text/value pair that can
            be returned by the webservice.
            </summary>
            <param name="text">Text</param>
            <param name="value">Value</param>
            <returns>serialized JSON object representing the text/value pair</returns>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.MinimumPrefixLength">
            <summary>
            Minimum length of text before the webservice provides suggestions.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.CompletionInterval">
            <summary>
            Time in milliseconds when the timer will kick in to get suggestions using the web service. 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.CompletionSetCount">
            <summary>
            Number of suggestions to be provided.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.CompletionListElementID">
            <summary>
            ID of element that will serve as the completion list.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.ServiceMethod">
            <summary>
            The web service method to be called.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.ServicePath">
            <summary>
            The path to the web service that the extender will pull the 
            word\sentence completions from. If this is not provided, the 
            service method should be a page method. 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.ContextKey">
            <summary>
            User/page specific context provided to an optional overload of the
            web method described by ServiceMethod/ServicePath.  If the context
            key is used, it should have the same signature with an additional
            parameter named contextKey of type string.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.UseContextKey">
            <summary>
            Whether or not the ContextKey property should be used.  This will be
            automatically enabled if the ContextKey property is ever set
            (on either the client or the server).  If the context key is used,
            it should have the same signature with an additional parameter
            named contextKey of type string.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.CompletionListCssClass">
            <summary>
            Css Class that will be used to style the completion list flyout.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.CompletionListItemCssClass">
            <summary>
            Css Class that will be used to style an item in the autocomplete list.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.CompletionListHighlightedItemCssClass">
            <summary>
            Css Class that will be used to style a highlighted item in the autocomplete list.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.EnableCaching">
            <summary>
            Flag to denote whether client side caching is enabled.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.DelimiterCharacters">
            <summary>
            Gets or sets the character(s) used to separate words for autocomplete.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.FirstRowSelected">
            <summary>
            Determines if the First Row of the Search Results be selected by default
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.ShowOnlyCurrentWordInCompletionListItem">
            <summary>
            If Delimiter characters are specified and ShowOnlyCurrentWordInCompletionListItem is 
            set to true, then the completion list displays suggestions just for the current word, 
            otherwise, it displays the whole string that will show up in the TextBox if that
            item is selected, which is the current default.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnShow">
            <summary>
            OnShow animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnHide">
            <summary>
            OnHide animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientPopulating">
            <summary>
            Handler to attach to the client-side populating event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientPopulated">
            <summary>
            Handler to attach to the client-side populated event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientShowing">
            <summary>
            Handler to attach to the client-side showing event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientShown">
            <summary>
            Handler to attach to the client-side shown event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientHiding">
            <summary>
            Handler to attach to the client-side hiding event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientHidden">
            <summary>
            Handler to attach to the client-side hidden event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientItemSelected">
            <summary>
            Handler to attach to the client-side itemSelected event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientItemOver">
            <summary>
            Handler to attach to the client-side itemOver event
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AutoCompleteExtender.OnClientItemOut">
            <summary>
            Handler to attach to the client-side itemOut event
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AnimationExtenderDesigner">
            <summary>
            Designer for AnimationExtender
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AlwaysVisibleControlExtender">
            <summary>
            Extender used to add constant visibility to an ASP.NET control.  The control that is extended
            then always moves to fixed position in the page regardless of how the body is resized or scrolled.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AlwaysVisibleControlExtender.EnsureValid">
            <summary>
            Validate the offsets
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AlwaysVisibleControlExtender.HorizontalOffset">
            <summary>
            Distance to the horizontal edge of the browser in pixels from the
            same side of the target control. The default is 0 pixels.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AlwaysVisibleControlExtender.HorizontalSide">
            <summary>
            Horizontal side of the browser to anchor the control against.
            The default is the Left side.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AlwaysVisibleControlExtender.VerticalOffset">
            <summary>
            Distance to the vertical edge of the browser in pixels from the
            same side of the target control. The default is 0 pixels.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AlwaysVisibleControlExtender.VerticalSide">
            <summary>
            Vertical side of the browser to anchor the control against.
            The default is the Top side.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AlwaysVisibleControlExtender.ScrollEffectDuration">
            <summary>
            Length in seconds for the scrolling effect to last when the target
            control is repositioned. The default is .1 seconds.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AlwaysVisibleControlExtender.UseAnimation">
            <summary>
            Whether or not to animate the element into position.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionItemEventArgs">
            <summary>
            The AccordionItemEventArgs is used to provide notication when
            Accordion items are created, databound, etc.
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionItemEventArgs._item">
            <summary>
            Container control for the Accordion item
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionItemEventArgs._type">
            <summary>
            Type of the Accordion item (i.e. Header or Content)
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionItemEventArgs.#ctor(AjaxControlToolkit.AccordionContentPanel,AjaxControlToolkit.AccordionItemType)">
            <summary>
            Constructor
            </summary>
            <param name="item">Container</param>
            <param name="type">AccordionItemType</param>
        </member>
        <member name="P:AjaxControlToolkit.AccordionItemEventArgs.AccordionItem">
            <summary>
            Container
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionItemEventArgs.ItemType">
            <summary>
            Type of the Accordion Item (either Header or Content)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionItemEventArgs.Item">
            <summary>
            DataItem being bound to the Container
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionItemEventArgs.ItemIndex">
            <summary>
            Index of the DataItem being bound to the Container
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderHandleAlignment">
            <summary>
            Options for positioning the reorder handle within the list item, relative to the item content itself.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.TargetButtonUpID">
            <summary>
            Control to Up
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.TargetButtonDownID">
            <summary>
            Control to Down
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.ServiceUpPath">
            <summary>
            Path to the helper web service
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.ServiceUpMethod">
            <summary>
            Method to the helper web service
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.ServiceDownPath">
            <summary>
            Path to the helper web service
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.ServiceDownMethod">
            <summary>
            Method to the helper web service
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.Step">
            <summary>
            Step used for simple numeric incrementing and decrementing
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.Minimum">
            <summary>
            Minimum Value
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.Maximum">
            <summary>
            Maximum Value
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.RefValues">
            <summary>
            List for RefValue
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.Width">
            <summary>
            TextBox + Button Width 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.NumericUpDownExtender.Tag">
            <summary>
            Custom parameter for call WebService method
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.MaskedEditExtender.#ctor">
            <summary>
            Enable client state for communicating default focus
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ListSearchQueryPattern">
            <summary>
            The search query pattern options for the ListSearchExtender.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ProfilePropertyBinding">
            <summary>
            Describes a profile binding to an Extender property.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ProfilePropertyBinding.ExtenderPropertyName">
            <summary>
            The property on the Extender (properties) class to bind to.  This is defined on the Extender's TargetProperties object.
            </summary>
            
        </member>
        <member name="P:AjaxControlToolkit.ProfilePropertyBinding.ProfilePropertyName">
            <summary>
            The profile property to bind to.  This is defined in the website's web.config.
            </summary>
            
        </member>
        <member name="T:AjaxControlToolkit.ExtenderControlPropertyAttribute">
            <summary>
            Signifies that this property is to be emitted as a client script property
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlPropertyAttribute.#ctor">
            <summary>
            Initializes a new ExtenderControlPropertyAttribute
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlPropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new ExtenderControlPropertyAttribute
            </summary>
            <param name="isScriptProperty"></param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlPropertyAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new ExtenderControlPropertyAttribute
            </summary>
            <param name="isScriptProperty"></param>
            <param name="useJsonSerialization"></param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlPropertyAttribute.Equals(System.Object)">
            <summary>
            Tests for object equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlPropertyAttribute.GetHashCode">
            <summary>
            Gets a hash code for this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlPropertyAttribute.IsDefaultAttribute">
            <summary>
            Gets whether this is the default value for this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlPropertyAttribute.IsScriptProperty">
            <summary>
            Whether this property should be exposed to the client
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlPropertyAttribute.UseJsonSerialization">
            <summary>
            Whether this property should use ASP.NET JSON serialization
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CollapsiblePanelExpandDirection">
            <summary>
            Enum choosing how the CollapsiblePanel does it's animation - via width or height
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionPaneCollection">
            <summary>
            The AccordionPaneCollection is used to wrap the Accordion.Controls collection
            and provide an AccordionPane only view.
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPaneCollection._parent">
            <summary>
            Parent Accordion whose Controls collection we are filtering
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPaneCollection._version">
            <summary>
            Counter used to prevent modification of the collection during enumeration
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.#ctor(AjaxControlToolkit.Accordion)">
            <summary>
            Constructor to associate the collection with an Accordion
            </summary>
            <param name="parent">Parent Accordion</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.ToRawIndex(System.Int32)">
            <summary>
            Since the Accordion.Controls collection may contain other controls than
            just AccordionPanes, we need to adjust the index for these additional controls.
            </summary>
            <param name="paneIndex">Index of the desired AccordionPane</param>
            <returns>Raw index in the Accordion.Controls collection</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.FromRawIndex(System.Int32)">
            <summary>
            Given an index in the parent Accordion.Controls collection, we determine
            its index in the collection of AccordionPanes
            </summary>
            <param name="index">Index in the Controls collection</param>
            <returns>Index in the AccordionPaneCollection</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.Add(AjaxControlToolkit.AccordionPane)">
            <summary>
            Add a new AccordionPane to the collection
            </summary>
            <param name="item">AccordionPane</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.Clear">
            <summary>
            Clear the AccordionPanes in the collection
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.Contains(AjaxControlToolkit.AccordionPane)">
            <summary>
            Check if the collection contains the desired AccordionPane
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the collection into an array
            </summary>
            <param name="array">Array (of AccordionPanes)</param>
            <param name="index">Index to begin copying</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.CopyTo(AjaxControlToolkit.AccordionPane[],System.Int32)">
            <summary>
            Copy the collection into an array
            </summary>
            <param name="array">Arrray</param>
            <param name="arrayIndex">Index to begin copying</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.IndexOf(AjaxControlToolkit.AccordionPane)">
            <summary>
            Get the index of the AccordionPane in the list
            </summary>
            <param name="item">AccordionPane</param>
            <returns>Index of the AccordionPane</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.Insert(System.Int32,AjaxControlToolkit.AccordionPane)">
            <summary>
            Insert a new AccordionPane at the given index
            </summary>
            <param name="index">Index</param>
            <param name="item">AccordionPane to insert</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.Remove(AjaxControlToolkit.AccordionPane)">
            <summary>
            Remove an AccordionPane from the collection
            </summary>
            <param name="item">AccordionPane</param>
            <returns>True if we were able to remove, false otherwise</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the AccordionPane at the given index from the collection
            </summary>
            <param name="index">Index of the AccordionPane to remove</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Add an AccordionPane to the list
            </summary>
            <param name="value">AccordionPane</param>
            <returns>Always returns 0</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Check if the list contains the AccordionPane
            </summary>
            <param name="value">AccordionPane</param>
            <returns>True if it contains the pane, false otherwise</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Get the inded of the provided AccordionPane
            </summary>
            <param name="value">AccordionPane</param>
            <returns>Index of the AccordionPane</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insert an AccordionPane at the given index
            </summary>
            <param name="index">Index</param>
            <param name="value">AccordionPane</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove an AccordionPane from the list
            </summary>
            <param name="value">AccordionPane</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator for the collection
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.GetEnumerator">
            <summary>
            Get an enumerator for the collection
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.Count">
            <summary>
            Number of AccordionPanes in the parent Accordion's Controls collection
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.IsReadOnly">
            <summary>
            The collection is not read-only so this always returns false
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.Item(System.Int32)">
            <summary>
            Index the AccordionPanes, or raise an ArgumentException if
            the index is invalid
            </summary>
            <param name="index">Index</param>
            <returns>AccordionPane</returns>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.Item(System.String)">
            <summary>
            Index the AccordionPanes by their Control.IDs.  We will return null
            if the desired pane is not found.
            </summary>
            <param name="id">AccordionPane Control ID</param>
            <returns>AccordionPane, or null if not found</returns>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IList#IsFixedSize">
            <summary>
            The collection is not a fixed size, so this
            always returns false
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Get an AccordionPane given its index
            </summary>
            <param name="index">Index</param>
            <returns>AccordionPane</returns>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            This collection is not synchronized, so it always returns false
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            This collection is not synchronized, so this always throws a
            NotImplementedException
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator">
            <summary>
            Enumerator for the AccordionPaneCollection
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator._collection">
            <summary>
            Reference to the collection
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator._parentEnumerator">
            <summary>
            Enumerator for the parent Accordion.Controls collection
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator._version">
            <summary>
            Version of the collection when we began enumeration
            (used to check for modifications of the collection)
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator.#ctor(AjaxControlToolkit.AccordionPaneCollection)">
            <summary>
            Constructor
            </summary>
            <param name="parent">AccordionPaneCollection</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator.CheckVersion">
            <summary>
            Ensure the collection has not been modified while enumerating
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator.Dispose">
            <summary>
            Dispose of the enumerator
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator.MoveNext">
            <summary>
            Move to the next AccordionPane
            </summary>
            <returns>True if we were able to move, false otherwise</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator.Reset">
            <summary>
            Reset the enumerator to the beginning of the list
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator.Current">
            <summary>
            Current AccordionPane
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionPaneCollection.AccordionPaneEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Current AccordionPane
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ToggleButtonExtender">
            <summary>
            ToggleButton extender class definition
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.ImageWidth">
            <summary>
            Width of the checkbox images
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.ImageHeight">
            <summary>
            Height of the checkbox images
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.UncheckedImageUrl">
            <summary>
            Location of the image for an unchecked checkbox
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.CheckedImageUrl">
            <summary>
            Location of the image for a checked checkbox
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.DisabledUncheckedImageUrl">
            <summary>
            Location of the image for an unchecked disabled checkbox
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.DisabledCheckedImageUrl">
            <summary>
            Location of the image for a checked disabled checkbox
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.CheckedImageOverUrl">
            <summary>
            Location of the image for a moused-over checked checkbox
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.UncheckedImageOverUrl">
            <summary>
            Location of the image for a moused-over unchecked checkbox
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.UncheckedImageAlternateText">
            <summary>
            Alternate Text for UncheckedImage (alt)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.CheckedImageAlternateText">
            <summary>
            Alternate Text for CheckedImage (alt)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.CheckedImageOverAlternateText">
            <summary>
            Alternate Text for CheckedImageOver (alt)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToggleButtonExtender.UncheckedImageOverAlternateText">
            <summary>
            Alternate Text for UncheckedImageOver (alt)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.Minimum">
            <summary>
             Get/Set the minimum value available for input.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.Maximum">
            <summary>
            Get/Set the maximum value available for input.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.RailCssClass">
            <summary>
            Get/Set the CSS class for the slider's rail element.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.HandleImageUrl">
            <summary>
            Get/Set the URL for the image to display in the slider's handle.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.HandleCssClass">
            <summary>
            Get/Set the CSS class for the handle element.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.EnableHandleAnimation">
            <summary>
            Enable/disable the handle animation played when the user clicks
            on the slider's rail.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.Steps">
            <summary>
            Get/Set the number of discrete values available for input. The steps are equi-spaced
            within the slider's range of values.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.Orientation">
            <summary>
            The orientation of the slider. A slider can be rendered horizontally or vertically.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.Decimals">
            <summary>
            Get/Set the number of decimal digits in the slider's value. A value 
            of 0 means an integer value.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.BoundControlID">
            <summary>
            Get/Set the ID of the server control to which the slider's value is bound.
            </summary>
            <remarks>
            The server control should be a TextBox or Label control.
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.Length">
            <summary>
            This property allows to specify a width (or an height, in case of a vertical slider)
            when using the slider's default layout.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.RaiseChangeOnlyOnMouseUp">
            <summary>
            This property allows to raise a client-side change event on the
            extended TextBox. This is useful for example to trigger an UpdatePanel's update
            when the slider's value changes.
            If set to true, the change event will be raised only when the user releases the 
            left mouse button on the slider. 
            If set to false, the change event will be raised whenever the slider's value
            changes.
            This property is set to true by default to prevent flooding of requests to 
            the web server.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.TooltipText">
            <summary>
            This property allows to specify some text to display in the tooltip of 
            the slider's handle. If the text contains the {0} placeholder, it will 
            be replaced by the current value of the slider.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.SliderExtender.EnableKeyboard">
            <summary>
            Determines if the slider will respond to arrow keys when it has focus.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.PopupExtender">
            <summary>
            The PopupExtender is used to show/hide an element at a position
            relative to another element
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.PopupExtender.OnPreRender(System.EventArgs)">
            <summary>
            Convert server IDs into ClientIDs for animations
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupExtender.ParentElementID">
            <summary>
            Position the target with respect to this element
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupExtender.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupExtender.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupExtender.PositioningMode">
            <summary>
            Positioning mode
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupExtender.OnShow">
            <summary>
            OnShow animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupExtender.OnHide">
            <summary>
            OnHide animation
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Toolbar.#ctor">
            <summary>
            Initializes a new Toolbar
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Toolbar.LocalResolveUrl(System.String)">
            <summary>
            Resolves Url of file.
            </summary>
            <param name="path">Path to file</param>
            <returns>Resolved Url.</returns>
        </member>
        <member name="T:AjaxControlToolkit.Design.TypedControlIDConverter`1">
            <summary>
            A simple derived class of ControlID converter that lets us filter based on a type.
            
            This lets us have drop-downs in the property browser that pick a given Button or TextBox, etc.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AjaxControlToolkit.DropDownDesigner">
            <summary>
            Designer for DropDown
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DropDownDesigner.GetDynamicContent">
            <summary>
            Signature of the page method for DynamicPopulateExtenderControlBase's web
            service that is used to support adding/navigating to the page method from
            the designer
            </summary>
            <param name="contextKey">User specific context</param>
            <returns>Dynamically generated content</returns>
        </member>
        <member name="T:AjaxControlToolkit.CollapsiblePanelExtender">
            <summary>
            An extender class which adds collapse/expand behavior to an ASP.NET Panel control.
            
            The panel that is extended can then be collapsed or expanded by the user of the page, which is handy
            for doing things like showing or hiding content or maximizing available space.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.CollapsiblePanelExtender.#ctor">
            <summary>
            Default constructor to enable client state
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.CollapseControlID">
            <summary>
            The server ID of the control to initiate the collapse of the target panel.  The panel will
            collapse when this control fires its client side "onclick" event.
            
            If this value is the same as the value for "ExpandControlID", the CollapsiblePanel will
            toggle when this control is clicked.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.ExpandControlID">
            <summary>
            The server ID of the control to initiate the expansion of the target panel.  The panel will
            opening when this control fires its client side "onclick" event.
            
            If this value is the same as the value for "CollapseControlID", the CollapsiblePanel will
            toggle when this control is clicked.       
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.AutoCollapse">
            <summary>
            If true, and the panel is in its 'expanded' state, the panel will
            automatically collapse when the mouse pointer moves off of the panel.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.AutoExpand">
            <summary>
            If true, and the panel is in its 'collapsed' state, the panel will
            automatically expand when the mouse pointer moves into the panel.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.CollapsedSize">
            <summary>
            The size of the panel when it is in it's collapsed state.  To avoid flicker when your page
            initializes, set the initial height (or width) of your Panel control to match this value, and set the Collapsed property
            to 'true'.
            
            The default value is -1, which indicates that the CollapsiblePanel should initialize the CollapsedSize based on the
            initial size of the object.
            </summary>
            
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.ExpandedSize">
            <summary>
            The size of the panel when it is in it's opened state.  To avoid flicker when your page
            initializes, set the initial width of your Panel control to match this value, and set the Collapsed property
            to 'false'.
            
            The default value is -1, which indicates that the CollapsiblePanel should initialize the ExpandedSize based on the
            parent div offsetheight if aligned vertically and parentdiv offsetwidth if aligned horizonatally.        
            </summary>      
            
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.ScrollContents">
            <summary>
            Determines whether the contents of the panel should be scrolled or clipped if they do not fit into
            the expanded size.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.SuppressPostBack">
            <summary>
            Determines whether the CollapsiblePanelBehavior should suppress the click operations of the controls
            referenced in CollapseControlID and/or ExpandControlID.  
            
            By default, this value is false, except for anchor ("A") tags.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.Collapsed">
            <summary>
            Signals the initial collapsed state of the control.  Note this will not cause
            an expanded control to collapse at initialization, but rather tells the extender
            what the initial state of the Panel control is. 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.CollapsedText">
            <summary>
            The text to display in the collapsed state.  When the panel is collapsed,
            the internal contents (anything between the start and ending tags) of the control referenced by
            the TextLabelID property will be replaced with this text.  This collapsed text is also used
            as the alternate text of the image if ImageControlID is set.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.ExpandedText">
            <summary>
            The text to display in the expanded state.  When the panel is expanded,
            the internal contents (anything between the start and ending tags) of the control referenced by
            the TextLabelID property will be replaced with this text.  This expanded text is also used
            as the alternate text of the image if ImageControlID is set.
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.TextLabelID">
            <summary>
            The ID of a label control to display the current state of the Panel.  When the collapsed state of the 
            panel changes, the entire HTML contents (anything between the start and ending tags of the label) will be replaced
            with the status text.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.ExpandedImage">
            <summary>
            Image to be displayed when the Panel is expanded and the ImageControlID is set
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.CollapsedImage">
            <summary>
            Image to be displayed when the Panel is collapsed and the ImageControlID is set
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.ImageControlID">
            <summary>
            The ID of an image control to display the current state of the Panel.  When the collapsed state of the 
            panel changes, the image source will be changed from the ExpandedImage to the CollapsedImage.  We also
            use the ExpandedText and CollapsedText as the image's alternate text if they are provided.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CollapsiblePanelExtender.ExpandDirection">
            <summary>
            The dimension to use for collapsing and expanding - vertical or horizontal.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AnimationScripts">
            <summary>
            The AnimationScripts class is used to load all of the animation support for the AJAX
            Control Toolkit.  To use any of the animations you find in Animations.js, simply include
            the attribute [RequiredScript(typeof(AnimationScripts))] on your extender.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.UpdatePanelAnimationExtender">
            <summary>
            Extender used to play animations just before and after an UpdatePanel updates
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.UpdatePanelAnimationExtender.OnPreRender(System.EventArgs)">
            <summary>
            Change any AnimationTarget references from server control IDs into the ClientIDs
            that the animation scripts are expecting.  We also replace any static AnimationTargets
            of the Updated animation with dynamic properties.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.UpdatePanelAnimationExtender.ReplaceStaticAnimationTargets(AjaxControlToolkit.Animation)">
            <summary>
            Replace any statically defined AnimationTarget properties with a corresponding
            TargetScript dynamic animation property
            </summary>
            <param name="animation">Animation</param>
        </member>
        <member name="P:AjaxControlToolkit.UpdatePanelAnimationExtender.OnUpdating">
            <summary>
            Animation played when an update begins
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.UpdatePanelAnimationExtender.OnUpdated">
            <summary>
            Animation played when an update completes
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ToggleButtonExtenderDesigner">
            <summary>
            ToggleButton designer class definition
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderListInsertLocation">
            <summary>
            Options for where a new tem is inserted in the list
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.ToolbarButton.BoxButton.#ctor">
            <summary>
            Initializes a new BoxButton
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Popups.AttachedTemplatePopup.#ctor">
            <summary>
            Initializes a new AttachedTemplatePopup
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Popups.OkCancelAttachedTemplatePopup.#ctor">
            <summary>
            Initializes a new OkCancelAttachedTemplatePopup
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Popups.LinkProperties.#ctor">
            <summary>
            Initializes a new LinkProperties
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DynamicPopulateDesigner.GetDynamicContent">
            <summary>
            Signature of the page method for DynamicPopulate's web service that
            is used to support adding/navigating to the page method from the designer
            </summary>
            <param name="contextKey">User specific context</param>
            <returns>Dynamically generated content</returns>
        </member>
        <member name="P:AjaxControlToolkit.DropShadowExtender.Opacity">
            <summary>
            The opacity of the shadow, from 0 (transparent - no shadow rendered) to 1.0, which is fully opaque black.
            The default is .5.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DropShadowExtender.Width">
            <summary>
            The width of the shadow on each side, in pixels.  Default is 5.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DropShadowExtender.TrackPosition">
            <summary>
            Determines whether the DropShadow tracks position or size changes of the panel
            it is targeting.  This is false by default.  If true, the DropShadowBehavior uses a timer to
            poll for the position of it's target, so don't turn it on unless it's needed.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CascadingDropDown">
            <summary>
            CascadingDropDown extender class definition
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.CascadingDropDown.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.CascadingDropDown.ShouldSerializeServicePath">
            <summary>
            Prevent the service path from being serialized when it's empty
            </summary>
            <returns>Whether the service path should be serialized</returns>
        </member>
        <member name="M:AjaxControlToolkit.CascadingDropDown.CascadingDropDown_ClientStateValuesLoaded(System.Object,System.EventArgs)">
            <summary>
            Populate DropDownLists with their SelectedValues
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.CascadingDropDown.ParseKnownCategoryValuesString(System.String)">
            <summary>
            Helper method to parse the private storage format used to communicate known category/value pairs
            </summary>
            <param name="knownCategoryValues">private storage format string</param>
            <returns>dictionary of category/value pairs</returns>
        </member>
        <member name="M:AjaxControlToolkit.CascadingDropDown.QuerySimpleCascadingDropDownDocument(System.Xml.XmlDocument,System.String[],System.Collections.Specialized.StringDictionary,System.String)">
            <summary>
            Helper method to provide a simple implementation of a method to query a data set and return the relevant drop down contents
            </summary>
            <param name="document">XML document containing the data set</param>
            <param name="documentHierarchy">list of strings representing the hierarchy of the data set</param>
            <param name="knownCategoryValuesDictionary">known category/value pairs</param>
            <param name="category">category for which the drop down contents are desired</param>
            <returns>contents of the specified drop down subject to the choices already made</returns>
        </member>
        <member name="M:AjaxControlToolkit.CascadingDropDown.QuerySimpleCascadingDropDownDocument(System.Xml.XmlDocument,System.String[],System.Collections.Specialized.StringDictionary,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Helper method to provide a simple implementation of a method to query a data set and return the relevant drop down contents
            </summary>
            <param name="document">XML document containing the data set</param>
            <param name="documentHierarchy">list of strings representing the hierarchy of the data set</param>
            <param name="knownCategoryValuesDictionary">known category/value pairs</param>
            <param name="category">category for which the drop down contents are desired</param>
            <param name="inputValidationRegex">regular expression used to validate user input to the web service (to prevent XPath injection attacks)</param>
            <returns>contents of the specified drop down subject to the choices already made</returns>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.ParentControlID">
            <summary>
            Optional ID of the parent DropDownList (upon which the contents of this control are based)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.Category">
            <summary>
            Category of this DropDownList (used when communicating with the helper web service)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.PromptText">
            <summary>
            Optional text displayed by a DropDownList the user has not yet touched.
            If omitted, first item in the dropdown is selected
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.PromptValue">
            <summary>
            Optional value for the option displayed by a DropDownList showing the PromptText
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.EmptyText">
            <summary>
            Optional text for the option displayed when the list is empty
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.EmptyValue">
            <summary>
            Optional value for the option displayed when the list is empty
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.LoadingText">
            <summary>
            Optional text displayed by a DropDownList when it is loading its data
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.SelectedValue">
            <summary>
            Selected value of the drop down
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.ServicePath">
            <summary>
            Path to the helper web service
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.ServiceMethod">
            <summary>
            Name of the web service method
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.ContextKey">
            <summary>
            User/page specific context provided to an optional overload of the
            web method described by ServiceMethod/ServicePath.  If the context
            key is used, it should have the same signature with an additional
            parameter named contextKey of type string.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.CascadingDropDown.UseContextKey">
            <summary>
            Whether or not the ContextKey property should be used.  This will be
            automatically enabled if the ContextKey property is ever set
            (on either the client or the server).  If the context key is used,
            it should have the same signature with an additional parameter
            named contextKey of type string.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CalendarPosition">
            <summary>
            The positioning choices for the Calendar popup
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.PreviewPanel.#ctor">
            <summary>
            Initializes a new PreviewPanel
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DragPanelDesigner">
            <summary>
            Designer class for DragPanel
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUploadState">
            <summary>
            AsyncFileUploadState represents the state of file that is requested to upload (Success, Failed, Unknown).
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUploadEventArgs">
            <summary>
            AsyncFileUploadEventArgs enables you to send values relate to file in the argument of event.
            AsyncFileUploadState, StatusMessage, filename and filesize can be passed with the help of this class.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUploadEventArgs.#ctor">
            <summary>
            Constructor to intialize object of type AsyncFieUploadEventArgs
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AsyncFileUploadEventArgs.#ctor(AjaxControlToolkit.AsyncFileUploadState,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of FileUploadEventArgs
            </summary>
            <param name="state"></param>
            <param name="statusMessage"></param>
            <param name="filename"></param>
            <param name="filesize"></param>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUploadEventArgs.StatusMessage">
            <summary>
            Gets status message of uploaded file.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUploadEventArgs.FileName">
            <summary>
            Gets file name of uploaded file.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUploadEventArgs.FileSize">
            <summary>
            Gets file size of uploaded file.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AsyncFileUploadEventArgs.State">
            <summary>
            Gets state of uploaded file.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ValidatorCalloutExtender.#ctor">
            <summary>
            Constructs a new ValidatorCalloutExtender.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ValidatorCalloutExtender.OnPreRender(System.EventArgs)">
            <summary>
            Convert server IDs into ClientIDs for animations
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ValidatorCalloutExtender.OnShow">
            <summary>
            OnShow animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ValidatorCalloutExtender.OnHide">
            <summary>
            OnHide animation
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.TabContainer.#ctor">
            <summary>
            Initializes a new TabContainer
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.TabContainer.UniqueID">
            <summary>
            To enable AutoPostBack, we need to call an ASP.NET script method with the UniqueId
            on the client side.  To do this, we just use this property as the one to serialize and
            alias it's name.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.PopupControlExtender">
            <summary>
            PopupControl extender
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DynamicPopulateExtenderControlBase">
            <summary>
            Base class that provides DynamicPopulate support to multiple extenders
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.DynamicPopulateExtenderControlBase.ShouldSerializeServicePath">
            <summary>
            Prevent serialization of the service path if no ServiceMethod was supplied
            </summary>
            <returns>Whether or not the service path should be serialized</returns>
        </member>
        <member name="M:AjaxControlToolkit.DynamicPopulateExtenderControlBase.EnsureValid">
            <summary>
            Ensure the properties have been set correctly
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtenderControlBase.DynamicControlID">
            <summary>
            ID of the control to dynamically populate
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtenderControlBase.DynamicContextKey">
            <summary>
            An arbitrary string value to be passed to the dynamic populate web method.  For example,
            if the element to be populated is within a data-bound repeater, this could be the ID of
            the current row. 
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtenderControlBase.DynamicServicePath">
            <summary>
            The URL of the web service to call. Leave this parameter blank and specify a
            ServiceMethod to call a PageMethod.  The web service should be decorated with the
            System.Web.Script.Services.ScriptService attribute.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtenderControlBase.DynamicServiceMethod">
            <summary>
            The name of the method to call on the page or web service.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtenderControlBase.CacheDynamicResults">
            <summary>
            Whether the results of the dynamic population should be cached and
            not fetched again after the first load
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.#ctor(System.Web.UI.Page)">
            <summary>
            Constructor with a page - Used to initialize proxy controls only.
            </summary>
            <param name="page">Page for which the control is proxying.</param>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.GetProxyForCurrentPopup(System.Web.UI.Page)">
            <summary>
            Gets a proxy PopupControlExtender representing the currently active popup on the specified page
            </summary>
            <remarks>
            Only the Cancel and Commit methods should be called on the proxy
            </remarks>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.Cancel">
            <summary>
            Cancels the popup control and hides it, abandoning any results it has
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.Commit(System.String)">
            <summary>
            Commits the popup control and hides it, applying the specified result
            </summary>
            <param name="result">result of popup</param>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.OnLoad(System.EventArgs)">
            <summary>
            Handles the OnLoad event.
            </summary>
            <param name="e">Argument associated with event.</param>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.Page_PreRender(System.Object,System.EventArgs)">
            <summary>
            Handles the Page_PreRender event.
            </summary>
            <param name="sender">Object sending this event.</param>
            <param name="e">Argument associated with event.</param>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.Close(System.String)">
            <summary>
            Closes the popup control, applying the specified result or abandoning it
            </summary>
            <param name="result">result of popup</param>
        </member>
        <member name="M:AjaxControlToolkit.PopupControlExtender.OnPreRender(System.EventArgs)">
            <summary>
            Convert server IDs into ClientIDs for animations
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.PopupControlID">
            <summary>
            ID of the control that pops up
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.CommitProperty">
            <summary>
            Optional name of the target control's property to set with the result of the popup
            </summary>
            <remarks>
            If not present, the default "value" property will be used
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.CommitScript">
            <summary>
            Optional script to run after setting the target control's property
            </summary>
            <remarks>
            Allows more complicated actions to be performed based on the popup results
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.Position">
            <summary>
            Optional position for the popup window (relative to the target control)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.OffsetX">
            <summary>
            Optional X (horizontal) offset for the popup window (relative to the target control)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.OffsetY">
            <summary>
            Optional Y (vertical) offset for the popup window (relative to the target control)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.OnShow">
            <summary>
            OnShow animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PopupControlExtender.OnHide">
            <summary>
            OnHide animation
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.PopupControlPopupPosition">
            <summary>
            Enumeration of valid values for the Position property
            </summary>
            <remarks>
            These values must be kept in sync with the client-side enum
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.PreferredPasswordLength">
            <summary>
            The preferred or ideal length of the password. Passwords could be less than this amount but wont reach the 100% calculation
            if less than this count. This is used to calculate 50% of the percentage strength of the password
            </summary>
            <example>Ideally, a password should be 20 characters in length to be a strong password.</example>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.MinimumNumericCharacters">
            <summary>
            The minimum number if numeric characters required. If there are less than this property, then the password is not
            considered strong. If there are equal to or more than this value, then this will contribute 15% to the overall
            password strength percentage value.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.HelpHandleCssClass">
            <summary>
            The Css class that is used to display the image for showing the password requirements to meet.
            This is used so that the user can click on this image and get a display on what is required to make the
            password strong according to the current properties.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.HelpHandlePosition">
            <summary>
            The position that the help handle is displayed
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:AjaxControlToolkit.PasswordStrength.MinimumSymbolCharacters" -->
        <member name="P:AjaxControlToolkit.PasswordStrength.RequiresUpperAndLowerCaseCharacters">
            <summary>
            Determines if mixed case passwords are required to be considered strong. If true, then there must be at least one occurrence
            of mixed case (upper and lower) letters in the password to be considered strong. If there is, this will contribute 20% to the
            overall password strength percentage value
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.TextCssClass">
            <summary>
            CSS class to apply to the control
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.PrefixText">
            <summary>
            The text prefixed to the password strength display value when using text display mode
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.StrengthIndicatorType">
            <summary>
            A property that is either Bar (as in progress bar indicating password strength) or
            text (i.e. low, medium, high, excellent for strength).
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.CalculationWeightings">
            <summary>
            The Calculation ratios or "weightings" used when calculating a passwords strength.
            Must be a string with 4 elements separated by a semi colon.
            Default is '50;15;15;20' which represents
            ... Password Length: 50%
            ... Meets Numerics requirements : 15%
            ... Meets Casing requirements: 15%
            ... Meets Symbol character requirements: 20%
            </summary>
            <remarks>Total of 4 elements must equal 100</remarks>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.TextStrengthDescriptions">
            <summary>
            A semi-colon delimited string that specifies the string descriptions for the password strength when using a textual display.
            </summary>
            <example>None;Weak;Medium;Strong;Excellent</example>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.StrengthStyles">
            <summary>
            A semi-colon delimited string that specifies the styles applicable to each
            string descriptions for the password strength when using a textual display.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.MinimumLowerCaseCharacters">
            <summary>
            If the <see cref="P:AjaxControlToolkit.PasswordStrength.RequiresUpperAndLowerCaseCharacters"/> property is true, then this property determines the
            minimum lower case characters that are required. The default value is 0 which means this property is not
            in effect and there is no minimum limit.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.MinimumUpperCaseCharacters">
            <summary>
            If the <see cref="P:AjaxControlToolkit.PasswordStrength.RequiresUpperAndLowerCaseCharacters"/> property is true, then this property determines the
            minimum upper case characters that are required. The default value is 0 which means this property is not
            in effect and there is no minimum limit.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.PasswordStrength.TextStrengthDescriptionStyles">
            <summary>
            A semi-colon delimited string that specifies the styles applicable to each
            string descriptions for the password strength when using a textual display.
            </summary>
            <remarks>THis property has been deprecated. Please use the <see cref="P:AjaxControlToolkit.PasswordStrength.StrengthStyles"/> property instead.</remarks>
        </member>
        <member name="T:AjaxControlToolkit.MultiHandleInnerRailStyle">
            <summary>
            Represents the possible ways to handle the inner rail graphic.
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.MultiHandleInnerRailStyle.AsIs">
            <summary>
            The rail style is presented as it is defined.
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.MultiHandleInnerRailStyle.SlidingDoors">
            <summary>
            The rail style is offset by its invisible area.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ModalPopupDesigner">
            <summary>
            Designer for the ModalPopup
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ModalPopupDesigner.GetDynamicContent">
            <summary>
            Signature of the page method for DynamicPopulateExtenderControlBase's web
            service that is used to support adding/navigating to the page method from
            the designer
            </summary>
            <param name="contextKey">User specific context</param>
            <returns>Dynamically generated content</returns>
        </member>
        <member name="T:AjaxControlToolkit.RequiredPropertyAttribute">
            <summary>
            The presence of this attribute on a property of a subclass of
            TargetControlPropertiesBase indicates that the property value is
            required and the control can not be used without it. Absence of a
            required property value causes an exception to be thrown during
            creation of the control.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.RequiredPropertyAttribute.#ctor">
            <summary>
            Constructs a new RequiredPropertyAttribute
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AsyncFileUploadDesigner">
            <summary>
            Control Designer for the TabContainer
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionItemType">
            <summary>
            Item type of an AccordionContentPanel
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionItemType.Header">
            <summary>
            Header section of the Pane
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionItemType.Content">
            <summary>
            Content section of the Pane
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.VerticalSide">
            <summary>
            The VerticalSide enumeration describes the vertical
            side of the window used to anchor the control
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.HorizontalSide">
            <summary>
            The HorizontalSide enumeration describes the horizontal
            side of the window used to anchor the control
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AutoSize">
            <summary>
            AutoSize provides several options for resizing an Accordion control
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AutoSize.None">
            <summary>
            Allow the Accordion to grow as tall as it wants
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AutoSize.Fill">
            <summary>
            Force the Accordion to be a specific height
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AutoSize.Limit">
            <summary>
            Limit the Accordion to a specific height
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionContentPanel">
            <summary>
            Class that adds a naming container to Panel and wraps
            an extra div around the rendered HTML.  This extra div serves
            the same purpose as the manually inserted div of CollapsiblePanel.
            Since setting the height of an element with padding or margins to
            zero can still leave something visible, it is this wrapper div
            with no additional space that we actually attach to.
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionContentPanel._collapsed">
            <summary>
            Whether or not the panel should be initially collapsed
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionContentPanel._dataItem">
            <summary>
            DataItem this content panel was bound to
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionContentPanel._dataIndex">
            <summary>
            Index in the data source this item was bound to
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.AccordionContentPanel._type">
            <summary>
            Whether this panel represents a header or a content section
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionContentPanel.#ctor">
            <summary>
            Internal default constructor to prevent external instantiation
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionContentPanel.#ctor(System.Object,System.Int32,AjaxControlToolkit.AccordionItemType)">
            <summary>
            Internal constructor used to intialize a databound pane's content
            </summary>
            <param name="dataItem">DataItem</param>
            <param name="dataIndex">DataIndex</param>
            <param name="type">AccordionItemType</param>
        </member>
        <member name="M:AjaxControlToolkit.AccordionContentPanel.OnBubbleEvent(System.Object,System.EventArgs)">
            <summary>
            Pass an AccordionCommandEventArgs whenever a CommandEvent is raised
            </summary>
            <param name="source">Source</param>
            <param name="args">EventArgs</param>
            <returns>If the event was handled</returns>
        </member>
        <member name="M:AjaxControlToolkit.AccordionContentPanel.SetDataItemProperties(System.Object,System.Int32,AjaxControlToolkit.AccordionItemType)">
            <summary>
            Assign values to the data binding properties
            </summary>
            <param name="dataItem">Data item to bind to</param>
            <param name="dataIndex">Index in the data source of this item</param>
            <param name="type">Whether this item is a Header or Content section</param>
        </member>
        <member name="P:AjaxControlToolkit.AccordionContentPanel.Collapsed">
            <summary>
            Whether or not the panel should be initially collapsed to a height of 1px
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionContentPanel.ItemType">
            <summary>
            Whether this panel represents a header or a content section
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionContentPanel.DataItem">
            <summary>
            DataItem this content panel was bound to
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionContentPanel.DataItemIndex">
            <summary>
            Index in the data source this item was bound to
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionContentPanel.DisplayIndex">
            <summary>
            Position of the item displayed in the Accordion
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.SlideShowDesigner">
            <summary>
            SlideShow designer
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.SlideShowDesigner.GetSlides">
            <summary>
            Signature of the page method for SlideShow's web service that
            is used to support adding/navigating to the page method from the designer
            </summary>
            <param name="contextKey">Optional user specific context</param>
            <returns>Slides to display</returns>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Popups.PopupBoxButton.#ctor">
            <summary>
            Initializes a new PopupBoxButton
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.HtmlPanel.#ctor">
            <summary>
            Initializes a new HtmlPanel
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.HoverMenuExtender">
            <summary>
            Extender class for associating the HoverMenu behavior with a server element.
            The HoverMenuExtender allows a control to be shown as a popup next to another
            control when the mouse pointer is moved over it.  This popup control can have
            any server content in it.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HoverMenuExtender.OnPreRender(System.EventArgs)">
            <summary>
            Convert server IDs into ClientIDs for animations
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.PopupControlID">
            <summary>
            The server ID of the control that will be displayed when the mouse hovers
            over the target element.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.HoverCssClass">
            <summary>
            The CSS class to apply to the target element when the mouse is over it or
            the popup element.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.OffsetX">
            <summary>
            The additional offset to apply between the target element and the popup
            element when it is displayed.  By default, the elements will be positioned
            with no space between them.  By specifying a value here, that amount of
            space, in pixels, will be added to the positioning.  The number can be
            negative to cause an overlap.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.OffsetY">
            <summary>
            The additional offset to apply between the target element and the popup
            element when it is displayed.  By default, the elements will be positioned
            with no space between them.  By specifying a value here, that amount of
            space, in pixels, will be added to the positioning.  The number can be
            negative to cause an overlap.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.PopDelay">
            <summary>
            The time, in milliseconds between then the mouse pointer exits the target
            element and when the popup element is hidden.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.HoverDelay">
            <summary>
            The time, in milliseconds, before the popup displays after hovering over the TargetControl
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.PopupPosition">
            <summary>
            The position of the popup element when it is shown.  This value can be any
            of the values in the HoverMenuPopupPosition enumeration, and the position
            can be modified by setting the OffsetX and/or OffsetY property.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.OnShow">
            <summary>
            OnShow animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.HoverMenuExtender.OnHide">
            <summary>
            OnHide animation
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ConfirmButtonDesigner">
            <summary>
            ConfirmButton designer class definition
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CommonToolkitScripts">
            <summary>
            This class just exists as a type to get common scripts loaded.  For further info
            see Common.js in this folder.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CalendarDefaultView">
            <summary>
            Choices for default view of the calendar when it first pops up.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Accordion">
            <summary>
            The Accordion control represents a series of panes that can be viewed
            one at a time.  The control is used to create "strongly typed" access
            to the AccordionBehavior.  Its major purpose is to structure the content
            in a way that the AccordionBehavior can understand it. 
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion.ItemCountViewStateKey">
            <summary>
            ViewState key for tracking the number of panes in the Accordion
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._extender">
            <summary>
            AccordionExtender to attach
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._panes">
            <summary>
            The Accordion's child panes
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._dataSource">
            <summary>
            DataSource to bind the Accordion to
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._headerTemplate">
            <summary>
            DataBinding template for the header
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._contentTemplate">
            <summary>
            DataBinding template for the content
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._initialized">
            <summary>
            Whether or not the control has been initialized
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._pagePreLoadFired">
            <summary>
            Whether the page's PreLoad event has already fired
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._requiresDataBinding">
            <summary>
            Whether or not the Accordion needs to be databound but hasn't been yet
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._throwOnDataPropertyChange">
            <summary>
            Flag to determine if we should throw an exception when a data property
            (i.e. DataSource, DataSourceID, DataMember) is changed
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._currentView">
            <summary>
            View of the the data provided by the data property
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._currentViewIsFromDataSourceID">
            <summary>
            Whether the current DataSourceView was loaded from a DataSourceID
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._currentViewValid">
            <summary>
            Whether the current DataSourceView contains valid data
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._arguments">
            <summary>
            Arguments used to sort, filter, etc., the data when creating
            the DataSourceView (although we will use the default whenever possible)
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._selectResult">
            <summary>
            Enumerable list of data items obtained from the DataSource
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.Accordion._selectWait">
            <summary>
            Thread synchronization event used for obtaining data from the DataSource
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.#ctor">
            <summary>
            Default constructor that tells ASP.NET to render it as a DIV
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnInit(System.EventArgs)">
            <summary>
            OnInit handler to wireup the Page's PreLoad event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnPagePreLoad(System.Object,System.EventArgs)">
            <summary>
            OnPreLoad is used to determine whether or not we still need to databind the Accordion
            </summary>
            <param name="sender">Sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnLoad(System.EventArgs)">
            <summary>
            Connect to the DataSourceView and determine if we still need to
            do databinding
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.CreateChildControls">
            <summary>
            Create the AccordionExtender and attach it to the div
            that will be generated for this control
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnPreRender(System.EventArgs)">
            <summary>
            Mark the selected AccordionPane so it does not appear collapsed
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.FindControl(System.String)">
            <summary>
            Override FindControl to look first at this control, then check each
            of its child AccordionPanes for the control
            </summary>
            <param name="id">ID of the control</param>
            <returns>Control</returns>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.ClearPanes">
            <summary>
            Empty out the child Pane's collection
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.ConnectToDataSourceView">
            <summary>
            Connects this data bound control to the appropriate DataSourceView
            and hooks up the appropriate event listener for the
            DataSourceViewChanged event. The return value is the new view (if
            any) that was connected to. An exception is thrown if there is
            a problem finding the requested view or data source.
            </summary>
            <returns>New View</returns>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.DataBind">
            <summary>
            Bind the Accordion to its DataSource
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnDataBinding(System.EventArgs)">
            <summary>
            DataBind the Accordion to its panes
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.CreateControlHierarchy(System.Boolean)">
            <summary>
            Create the new control hierarchy of AccordionPanes
            (using the DataSource if specificed)
            </summary>
            <param name="useDataSource">Whether or not we should use the DataSource</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.CreateItem(System.Object,System.Int32,AjaxControlToolkit.AccordionItemType,AjaxControlToolkit.AccordionContentPanel,System.Web.UI.ITemplate,System.Boolean)">
            <summary>
            Create an AccordionPane's item (either Header or Content) and raise the ItemCreated event
            </summary>
            <param name="dataItem">Item's data</param>
            <param name="index">Index</param>
            <param name="itemType">Type of the item (Header or Content)</param>
            <param name="container">Control to fill</param>
            <param name="template">Template for the binding</param>
            <param name="dataBind">Whether or not to bind</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.EnsureDataBound">
            <summary>
            Ensure that the Accordion has been databound if it needed to be
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.GetData">
            <summary>
            Returns an IEnumerable that is the DataSource, which either came
            from the DataSource property or from the control bound via the
            DataSourceID property.
            </summary>
            <returns>DataSource</returns>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.CreateDataSourceSelectArguments">
            <summary>
            Create the DataSourceSelectArguments (which just defaults to the Empty value
            because we don't want to sort, filter, etc.)
            </summary>
            <returns>DataSourceSelectArguments</returns>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.DoSelect(System.Collections.IEnumerable)">
            <summary>
            Select the data
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnBubbleEvent(System.Object,System.EventArgs)">
            <summary>
            Wrap the CommandArgs of an ItemCommand event with AccordionCommandEventArgs
            </summary>
            <param name="source">Source</param>
            <param name="args">EventArgs</param>
            <returns>Whether the event was handled</returns>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnDataPropertyChanged">
            <summary>
            This method is called when DataMember, DataSource, or DataSourceID is changed.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnDataSourceViewChanged(System.Object,System.EventArgs)">
            <summary>
            Indicate that we need to be databound whenever the DataSourceView changes
            </summary>
            <param name="sender">Sender</param>
            <param name="args">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnItemCommand(AjaxControlToolkit.AccordionCommandEventArgs)">
            <summary>
            Raise the ItemCommand event
            </summary>
            <param name="args">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnItemCreated(AjaxControlToolkit.AccordionItemEventArgs)">
            <summary>
            Raise the ItemCreatedEvent
            </summary>
            <param name="args">EventArgs</param>
        </member>
        <member name="M:AjaxControlToolkit.Accordion.OnItemDataBound(AjaxControlToolkit.AccordionItemEventArgs)">
            <summary>
            Raise the ItemDataBound event
            </summary>
            <param name="args">EventArgs</param>
        </member>
        <member name="E:AjaxControlToolkit.Accordion.ItemCreated">
            <summary>
            Event to raise when an item (i.e. Pane's Header or Content) is
            created during data binding
            </summary>
        </member>
        <member name="E:AjaxControlToolkit.Accordion.ItemDataBound">
            <summary>
            Event to raise when an item (i.e. Pane's Header or Content) is
            data bound
            </summary>
        </member>
        <member name="E:AjaxControlToolkit.Accordion.ItemCommand">
            <summary>
            Event to raise when a command is fired
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.AccordionExtender">
            <summary>
            Reference to the AccordionExtender wrapped by the Accordion control
            </summary>
            <remarks>
            This will be referenced in CreateChildControls so that the extender
            will always be created by any calls to EnsureChildControls.
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.TransitionDuration">
            <summary>
            Length of the transition animation in milliseconds
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.FramesPerSecond">
            <summary>
            The number of frames per second used in the transition animation effects.
            This is used to tune performance when using FadeTransition, a large number
            of Accordion Panes, etc.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.FadeTransitions">
            <summary>
            Whether or not to use a fade effect when transitioning between selected
            Accordion Panes
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.HeaderCssClass">
            <summary>
            Default Header CSS Class
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.HeaderSelectedCssClass">
            <summary>
            Default selected Header CSS Class
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.ContentCssClass">
            <summary>
            Default Content CSS Class
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.AutoSize">
            <summary>
            Determine how growth of the Accordion will be controlled.  If it is set to
            None, then the Accordion can grow as large or as small as necessary.  If it is
            set to Limit, then the Accordion will always be less than or equal to its
            Height.  If it is set to Fill then it will always be equal to its height.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.SelectedIndex">
            <summary>
            Index of the AccordionPane to be displayed
            (this property must be set before OnPreRender)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.RequireOpenedPane">
            <summary>
            Whether or not clicking the header will close the currently opened pane (leaving
            all the Accordion's panes closed)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.SuppressHeaderPostbacks">
            <summary>
            Whether or not we suppress the client-side click handlers of any elements (including server
            controls like Button or HTML elements like anchor) in the header sections of the Accordion.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.Panes">
            <summary>
            Collection of child panes in the Accordion
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.Controls">
            <summary>
            Prevent the Controls property from appearing in the editor (so
            that people will use the Panes collection instead)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.HeaderTemplate">
            <summary>
            Template for the Header of databound panes
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.ContentTemplate">
            <summary>
            Template for the Content of databound panes
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.DataSource">
            <summary>
            Gets or sets the data source that provides data for populating
            the list of AccordionPanes.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.DataSourceID">
            <summary>
            The ID of the DataControl that this control should use to retrieve
            its data source. When the control is bound to a DataControl, it
            can retrieve a data source instance on-demand, and thereby attempt
            to work in auto-DataBind mode.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.DataMember">
            <summary>
            Member in the DataSource to bind to
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.IsBoundUsingDataSourceID">
            <summary>
            Whether or not the Accordion was databound using the DataSourceID
            property rather than setting the DataSource directly
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.RequiresDataBinding">
            <summary>
            Whether or not the control has already been databound, or still needs
            to be databound
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Accordion.SelectArguments">
            <summary>
            Arguments used to request data-related operations from
            data source controls when data is retrieved
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ValidatorCalloutPosition">
            <summary>
            The positioning choices for the ValidatorCallout popup
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderListItem">
            <summary>
            This is the control that represents an item in the reorder list.
            
            It's kind of special because it can either be an LI element or something else,
            which is needed so the DragHandle can also be bindable (it's a child of a list item)
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ReorderListItem.OnBubbleEvent(System.Object,System.EventArgs)">
            <summary>
            When we get a bubble event, we create our ReorderListCommandArgs object
            and pass the event up to our parent to handle.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListItem.ItemType">
            <summary>
            Deterimines the time of this item, such as a EditItem, InsertItem, etc.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListItem.DataItem">
            <summary>
            The data object this item is bound to
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListItem.ItemIndex">
            <summary>
            The index of this item
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListItem.IsAddItem">
            <summary>
            Is this a new item?
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.MultiHandleSliderTarget">
            <summary>
            A description for a control that is bound to the effects of a <see cref="T:AjaxControlToolkit.MultiHandleSliderExtender"/>.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderTarget.ControlID">
            <summary>
            Sets the ID of the control that is bound to the location of this handle.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderTarget.HandleCssClass">
            <summary>
            Sets the style of the handle associated with this <see cref="T:AjaxControlToolkit.MultiHandleSliderTarget"/>, if custom styles are used.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.MultiHandleSliderTarget.Offset">
            <summary>
            Sets the number of pixels to offset the width of the handle, for handles with transparent space.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ScriptUserControl">
            <summary>
            ScriptUserControl is used to define complex user controls which support ASP.NET AJAX script extensions
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.#ctor(System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Initializes a new ScriptUserControl
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.#ctor">
            <summary>
            Initializes a new ScriptUserControl
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.#ctor(System.String)">
            <summary>
            Initializes a new ScriptUserControl
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.#ctor(System.Boolean)">
            <summary>
            Initializes a new ScriptUserControl
            </summary>
            <param name="enableClientState"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.#ctor(System.Boolean,System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Initializes a new ScriptUserControl
            </summary>
            <param name="enableClientState"></param>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new ScriptUserControl
            </summary>
            <param name="enableClientState"></param>
            <param name="tag"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.EnsureScriptManager">
            <summary>
            Ensures a ScriptManager exists on the Page for this Control
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.FindControl(System.String)">
            <summary>
            Finds a control reference by its ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render's the begin tag of the control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the end tag of the control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.OnLoad(System.EventArgs)">
            <summary>
            Handles OnLoad
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.OnPreRender(System.EventArgs)">
            <summary>
            Fires the PreREnder event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.CreateControlStyle">
            <summary>
            Creates a Style for this control
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.LoadClientState(System.String)">
            <summary>
            Loads the client state data
            </summary>
            <param name="clientState"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.SaveClientState">
            <summary>
            Saves the client state data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.SaveViewState">
            <summary>
            Saves the ViewState for this control
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Executed when post data is loaded from the request
            </summary>
            <param name="postDataKey"></param>
            <param name="postCollection"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.RaisePostDataChangedEvent">
            <summary>
            Executed when post data changes should invoke a chagned event
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds attributes to the writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.GetScriptDescriptors">
            <summary>
            Gets the ScriptDescriptors that make up this control
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.GetScriptReferences">
            <summary>
            Gets the script references for this control
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.DescribeComponent(System.Web.UI.ScriptComponentDescriptor)">
            <summary>
            Describes the settings for this control.
            </summary>
            <param name="descriptor"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.GetCallbackResult">
            <summary>
            Handles a callback event
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptUserControl.RaiseCallbackEvent(System.String)">
            <summary>
            Raises a callback event
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.ScriptPath">
            <summary>
            For debugging - setting this causes the extender to load the specified script instead of the one out of the resources.  This
            lets you set breakpoints and modify the script without rebuilding, etc.
            </summary>
            <remarks>
            Note to inheritors: If you do not wish the user to set the script path, override script path and throw a NotSupportedException on set.  Also decorate the ScriptPath attribute with a [Browsable(false)] and [EditorBrowsableState(EditorBrowsableState.Never)]
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.ControlStyle">
            <summary>
            The Style for this control
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.ControlStyleCreated">
            <summary>
            Whether the control's style has been created
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.Style">
            <summary>
            The Css Style for this control
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.ClientControlType">
            <summary>
            The script type to use for the ScriptControl
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.SupportsClientState">
            <summary>
            Whether this control supports ClientState
            </summary>
            <remarks>
            Note to inheritors: You should either pass true to the constructor for enableClientState or override this property to enable client state for inherited controls.
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.ScriptManager">
            <summary>
            Gets the ScriptManager for the page
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.ClientStateFieldID">
            <summary>
            The ID of the ClientState field
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.TagKey">
            <summary>
            Gets the tag key used when rendering the outer wrapper element for this user control
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ScriptUserControl.TagName">
            <summary>
            Gets the tag name used when rendering the outer wrapper element for this user control
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionExtender">
            <summary>
            Given a proper hierarchy of elements (see AccordionBehavior.js for details),
            turn it into an Accordion
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AccordionExtender.#ctor">
            <summary>
            Enable ClientState
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.AutoSize">
            <summary>
            Determine how growth of the Accordion will be controlled.  If it is set to
            None, then the Accordion can grow as large or as small as necessary.  If it is
            set to Limit, then the Accordion will always be less than or equal to its
            Height.  If it is set to Fill then it will always be equal to its height.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.TransitionDuration">
            <summary>
            Length of transition between accordion panes in milliseconds
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.FadeTransitions">
            <summary>
            Whether or not to use a fade effect when transitioning between selected
            Accordion Panes
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.FramesPerSecond">
            <summary>
            The number of frames per second used in the transition animation effects.
            This is used to tune performance when using FadeTransition, a large number
            of Accordion Panes, etc.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.SelectedIndex">
            <summary>
            Index of the AccordionPane that is currently selected for display
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.RequireOpenedPane">
            <summary>
            Whether or not clicking the header will close the currently opened pane (which leaves
            all the Accordion's panes closed)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.SuppressHeaderPostbacks">
            <summary>
            Whether or not we suppress the client-side click handlers of any elements (including server
            controls like Button or HTML elements like anchor) in the header sections of the Accordion.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.HeaderCssClass">
            <summary>
            Default Header CSS Class
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.HeaderSelectedCssClass">
            <summary>
            Default selected Header CSS Class
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AccordionExtender.ContentCssClass">
            <summary>
            Default Content CSS Class
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ScriptObjectBuilder">
            <summary>
            Gets the script references for a type
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.#cctor">
            <summary>
            Static constructor to insert standard custom conversions
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.DescribeComponent(System.Object,System.Web.UI.ScriptComponentDescriptor,System.Web.UI.IUrlResolutionService,AjaxControlToolkit.IControlResolver)">
            <summary>
            Describes an object to a ScriptComponentDescriptor based on its reflected properties and methods
            </summary>
            <param name="instance">The object to be described</param>
            <param name="descriptor">The script descriptor to fill</param>
            <param name="urlResolver">The object used to resolve urls</param>
            <param name="controlResolver">The object used to resolve control references</param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.GetScriptReferences(System.Type)">
            <summary>
            Gets the script references for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.GetScriptReferences(System.Type,System.Boolean)">
            <summary>
            Gets the ScriptReferences for a Type
            </summary>
            <param name="type">Type for which references are to be gotten</param>
            <param name="ignoreStartingTypeReferences">true if the ClientScriptResource for the starting type is to be ignored</param>
            <returns>list of ScriptReferences for the Type</returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.GetCssReferences(System.Web.UI.Control)">
            <summary>
            Gets the embedded css file references for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.RegisterCssReferences(System.Web.UI.Control)">
            <summary>
            Register's the Css references for this control
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.ExecuteCallbackMethod(System.Web.UI.Control,System.String)">
            <summary>
            Executes a callback capable method on a control
            </summary>
            <param name="control"></param>
            <param name="callbackArgument"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.ScriptReferencesFromResourceEntries(System.Collections.Generic.IList{AjaxControlToolkit.ScriptObjectBuilder.ResourceEntry})">
            <summary>
            ScriptReference objects aren't immutable.  The AJAX core adds context to them, so we cant' reuse them.
            Therefore, we track only ReferenceEntries internally and then convert them to NEW ScriptReference objects on-demand.        
            </summary>
            <param name="entries"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.GetScriptReferencesInternal(System.Type,System.Collections.Generic.Stack{System.Type},System.Boolean)">
            <summary>
            Gets the ScriptReferences for a Type and walks the Type's dependencies with circular-reference checking
            </summary>
            <param name="type">Type for which references are to be gotten</param>
            <param name="typeReferenceStack">Stack of Types to track processed types</param>
            <param name="ignoreStartingTypeReferences">true if the ClientScriptResource for the starting type is to be ignored</param>
            <returns>list of ScriptReferences for the Type</returns>
        </member>
        <member name="M:AjaxControlToolkit.ScriptObjectBuilder.GetCssReferences(System.Web.UI.Control,System.Type,System.Collections.Generic.Stack{System.Type})">
            <summary>
            Gets the css references for a type and walks the type's dependencies with circular-reference checking
            </summary>
            <param name="type"></param>
            <param name="typeReferenceStack"></param>
            <returns></returns>
        </member>
        <member name="P:AjaxControlToolkit.ScriptObjectBuilder.CustomConverters">
            <summary>
            Mapping of types to delegates that convert objects of that type to
            strings
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AutoCompleteDesigner">
            <summary>
            AutoComplete Designer class
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AutoCompleteDesigner.GetCompletionList">
            <summary>
            Signature of the page method for AutoComplete's web service that
            is used to support adding/navigating to the page method from the designer
            </summary>
            <param name="prefixText">Text already entered</param>
            <param name="count">Number of items to return</param>
            <param name="contextKey">Optional user specific context</param>
            <returns>Possible completions of the prefix text</returns>
        </member>
        <member name="T:AjaxControlToolkit.AnimationJavaScriptConverter">
            <summary>
            The AnimationJavaScriptConverter is used to convert Animation objects to and from a
            representation understood by the JavaScriptSerializer.  We cannot rely on the
            JavaScriptSerializer's default conversion because our JSON is expected to be in a
            specific format.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AnimationJavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Convert an Animation to a representation understood by the JavaScriptSerializer
            </summary>
            <param name="obj">Object to convert</param>
            <param name="serializer">Serializer</param>
            <returns>Converted representation of the Animation</returns>
        </member>
        <member name="M:AjaxControlToolkit.AnimationJavaScriptConverter.Serialize(AjaxControlToolkit.Animation)">
            <summary>
            Recursively onvert an Animation to a representation understood by the JavaScriptSerializer
            </summary>
            <param name="animation">Animation</param>
            <returns>Converted representation of the Animation</returns>
        </member>
        <member name="M:AjaxControlToolkit.AnimationJavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Convert the JavaScriptSerializer's representation into an Animation
            </summary>
            <param name="dictionary">Representation of the Animation</param>
            <param name="t">Type to deserialize (should be Animation or derived class)</param>
            <param name="serializer">Serializer</param>
            <returns>Animation</returns>
        </member>
        <member name="M:AjaxControlToolkit.AnimationJavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Recursively convert the JavaScriptSerializer's representation into an Animation
            </summary>
            <param name="obj">Representation of the Animation</param>
            <returns>Animation</returns>
        </member>
        <member name="P:AjaxControlToolkit.AnimationJavaScriptConverter.SupportedTypes">
            <summary>
            Animation is the only type this converter can be used on
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AnimationExtender">
            <summary>
            Extender used to play animations when a control's events fire
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.AnimationExtender.OnPreRender(System.EventArgs)">
            <summary>
            Change any AnimationTarget references from server control IDs into the ClientIDs
            that the animation scripts are expecting.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="P:AjaxControlToolkit.AnimationExtender.OnLoad">
            <summary>
            OnLoad Animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AnimationExtender.OnClick">
            <summary>
            OnClick Animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AnimationExtender.OnMouseOver">
            <summary>
            OnMouseOver Animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AnimationExtender.OnMouseOut">
            <summary>
            OnMouseOut Animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AnimationExtender.OnHoverOver">
            <summary>
            OnHoverOver Animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.AnimationExtender.OnHoverOut">
            <summary>
            OnHoverOut Animation
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Animation">
            <summary>
            The Animation class is an object model for the animations used in the Ajax Control Toolkit.
            It is used primarily as an intermediate representation when converting from XML animation
            descriptions to JSON objects, but it can also be used to dynamically create and manipulate
            animations.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Animation.#cctor">
            <summary>
            Static constructor to setup our serializer
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Animation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Animation.ToString">
            <summary>
            Convert the animation into its JSON description
            </summary>
            <returns>JSON description of the animation</returns>
        </member>
        <member name="M:AjaxControlToolkit.Animation.Serialize(AjaxControlToolkit.Animation)">
            <summary>
            Convert an animation into its JSON description
            </summary>
            <param name="animation">Animation to convert</param>
            <returns>JSON description of the animation</returns>
        </member>
        <member name="M:AjaxControlToolkit.Animation.Deserialize(System.String)">
            <summary>
            Convert a JSON animation description into an Animation object.
            </summary>
            <param name="json">JSON animation description</param>
            <returns>Animation</returns>
        </member>
        <member name="M:AjaxControlToolkit.Animation.Deserialize(System.Xml.XmlNode)">
            <summary>
            Convert an XML animation description into an Animation object
            </summary>
            <param name="node">Node in an XmlDocument to deserialize</param>
            <returns>Deserialized animation</returns>
        </member>
        <member name="M:AjaxControlToolkit.Animation.Parse(System.String,System.Web.UI.ExtenderControl)">
            <summary>
            Convert a series of XML animation descriptions into Animations and assign them to their corresponding
            Animation properties on a provided ExtenderControl instance.  This will most likely be called by
            AnimationExtenderControlBase.Animations, but it is publicly exposed so you can call it in the event
            your extender cannot inherit from AnimationExtenderControlBase.
            </summary>
            <param name="value">
            Sequence of XML animation descriptions (i.e. there should not be a root node because it's expecting the
            inner contents of the &lt;Animations&gt; tag)
            </param>
            <param name="targetProperties">Target properties that contains the corresponding Animations</param>
        </member>
        <member name="M:AjaxControlToolkit.Animation.GetLineNumber(System.String,System.String)">
            <summary>
            GetLineNumber is used when reporting errors in Animation XML
            descriptions. It will find the line number of the first top level
            node whose tag matches the provided value.
            </summary>
            <param name="source">Animation XML description</param>
            <param name="tag">Tag of the node to find</param>
            <returns>Line number of the tag, or the first line if nothing found</returns>
        </member>
        <member name="P:AjaxControlToolkit.Animation.Name">
            <summary>
            Name of the animation (this corresponds to the tag name of the XML
            description, or the AnimationName property of the JSON description) that
            matches the name of a registered animation (i.e. this must match one of
            the names provided on the client in a call to
            Sys.Extended.UI.Animation.registerAnimation('name', type);).
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Animation.Children">
            <summary>
            List of child animations (this corresponds to any child elements in the XML
            description, or the AnimationChildren array in the JSON description), which
            should only be needed for animations inheriting from SequenceAnimation or
            CompositeAnimation.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Animation.Properties">
            <summary>
            Properties defined for the animation (this corresponds to any of the
            attributes in the XML description, or any of the members in the JSON
            description), which specify all the necessary parameters of the animation.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AlwaysVisibleControlDesigner">
            <summary>
            Designer for the AlwaysVisibleControlExtender
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Rating.CurrentRating">
            <summary>
            Length of the transition animation in milliseconds
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Properties.Resources_NET4">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Properties.Resources_NET4.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Properties.Resources_NET4.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Properties.Resources_NET4.E_NoScriptManager">
            <summary>
              Looks up a localized string similar to A ScriptManager is required on the page to use ASP.NET AJAX Script Components..
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Properties.Resources_NET4.SessionStateOutOfProcessNotSupported">
            <summary>
              Looks up a localized string similar to The AsyncFileUpload control only supports session state mode &quot;InProc&quot; when persisting files in session..
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.NumericUpDownDesigner.GetNextValue">
            <summary>
            Signature of the page method for NumericUpDown's web service that
            is used to support adding/navigating to the page method from the designer
            </summary>
            <param name="current">Current value</param>
            <param name="tag">User specific context</param>
            <returns>Value</returns>
        </member>
        <member name="T:AjaxControlToolkit.NumericUpDownDesigner.GetPreviousValue">
            <summary>
            Signature of the page method for NumericUpDown's web service that
            is used to support adding/navigating to the page method from the designer
            </summary>
            <param name="current">Current value</param>
            <param name="tag">User specific context</param>
            <returns>Value</returns>
        </member>
        <member name="T:AjaxControlToolkit.ExtenderControlEventAttribute">
            <summary>
            Signifies that this Property should be exposed as a client-side event reference
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlEventAttribute.#ctor">
            <summary>
            Initializes a new ExtenderControlEventAttribute
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlEventAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new ExtenderControlEventAttribute
            </summary>
            <param name="isScriptEvent"></param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlEventAttribute.Equals(System.Object)">
            <summary>
            Tests for object equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlEventAttribute.GetHashCode">
            <summary>
            Gets a hash code for this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlEventAttribute.IsDefaultAttribute">
            <summary>
            Gets whether this is the default value for this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlEventAttribute.IsScriptEvent">
            <summary>
            Whether this is a valid ScriptEvent
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ToolkitScriptManager">
            <summary>
            ScriptManager derived class to add the ability to combine multiple
            smaller scripts into one larger one as a way to reduce the number
            of files the client must download
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.CombinedScriptsParamName">
            <summary>
            Request param name for the serialized combined scripts string
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.HiddenFieldParamName">
            <summary>
            Request param name for the hidden field name
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.WebResourceRegex">
            <summary>
            Regular expression for detecting WebResource/ScriptResource substitutions in script files
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager._scriptEntries">
            <summary>
            List of ScriptEntry objects tracking scripts that are used by the page
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager._combinedScriptUrl">
            <summary>
            Url for the browser to request to get the combined script file
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager._disabledScriptReferences">
            <summary>
            List of script references that have been disabled
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager._uncombinableScriptReferences">
            <summary>
            List of script references that have been seen and are uncombinable
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.OnLoad(System.EventArgs)">
            <summary>
            OnLoad override that runs only when serving the original page
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)">
            <summary>
            OnResolveScriptReference override to track combinable scripts and update the script references
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.OnInit(System.EventArgs)">
            <summary>
            OnInit override that runs only when serving the combined script file
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.OutputCombinedScriptFile(System.Web.HttpContext)">
            <summary>
            Outputs the combined script file requested by the HttpRequest to the HttpResponse
            </summary>
            <param name="context">HttpContext for the transaction</param>
            <returns>true if the script file was output</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.WriteScripts(System.Collections.Generic.List{AjaxControlToolkit.ToolkitScriptManager.ScriptEntry},System.IO.TextWriter)">
            <summary>
            Writes scripts (including localized script resources) to the specified stream
            </summary>
            <param name="scriptEntries">list of scripts to write</param>
            <param name="outputWriter">writer for output stream</param>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.IsScriptCombinable(AjaxControlToolkit.ToolkitScriptManager.ScriptEntry)">
            <summary>
            Checks if the specified ScriptEntry is combinable
            </summary>
            <param name="scriptEntry">ScriptEntry to check</param>
            <returns>true iff combinable</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.SerializeScriptEntries(System.Collections.Generic.List{AjaxControlToolkit.ToolkitScriptManager.ScriptEntry},System.Boolean)">
            <summary>
            Serialize a list of ScriptEntries
            </summary>
            <remarks>
            Serialized list looks like:
            ;Assembly1.dll Version=1:Culture:MVID1:ScriptName1Hash:ScriptName2Hash;Assembly2.dll Version=2:Culture:MVID1:ScriptName3Hash
            </remarks>
            <param name="scriptEntries">list of scripts to serialize</param>
            <param name="allScripts">true iff all scripts should be serialized; otherwise only not loaded ones</param>
            <returns>serialized list</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.DeserializeScriptEntries(System.String,System.Boolean)">
            <summary>
            Deserialize a list of ScriptEntries
            </summary>
            <remarks>
            Serialized list looks like:
            ;Assembly1.dll Version=1:Culture:MVID1:ScriptName1Hash:ScriptName2Hash;Assembly2.dll Version=2:Culture:MVID1:ScriptName3Hash
            </remarks>
            <param name="serializedScriptEntries">serialized list</param>
            <param name="loaded">loaded state of the serialized scripts</param>
            <returns>list of scripts</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.QuoteString(System.String)">
            <summary>
            Callable implementation of System.Web.Script.Serialization.JavaScriptString.QuoteString
            </summary>
            <param name="value">value to quote</param>
            <returns>quoted string</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.AppendCharAsUnicode(System.Text.StringBuilder,System.Char)">
            <summary>
            Callable implementation of System.Web.Script.Serialization.JavaScriptString.AppendCharAsUnicode
            </summary>
            <param name="builder">string builder</param>
            <param name="c">character to append</param>
        </member>
        <member name="P:AjaxControlToolkit.ToolkitScriptManager.CombineScripts">
            <summary>
            Specifies whether or not multiple script references should be combined into a single file
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ToolkitScriptManager.CombineScriptsHandlerUrl">
            <summary>
            Optionally specifies the URL of an HTTP handler for generating the combined script files
            </summary>
            <remarks>
            The handler's ProcessRequest method should call directly through to ToolkitScriptManager.OutputCombinedScriptFile
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ToolkitScriptManager.HiddenFieldName">
            <summary>
            Name of the hidden field used to store loaded scripts
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry">
            <summary>
            Represents a script reference - including tracking its loaded state in the client browser
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.Assembly">
            <summary>
            Containing Assembly
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.Name">
            <summary>
            Script name
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.Culture">
            <summary>
            Culture to render the script in
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.Loaded">
            <summary>
            Loaded state of the script in the client browser
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry._loadedAssembly">
            <summary>
            Reference to the Assembly object (if loaded by LoadAssembly)
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="assembly">containing assembly</param>
            <param name="name">script name</param>
            <param name="culture">culture for rendering the script</param>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.#ctor(System.Web.UI.ScriptReference)">
            <summary>
            Constructor
            </summary>
            <param name="scriptReference">script reference</param>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.GetScript">
            <summary>
            Gets the script corresponding to the object
            </summary>
            <returns>script text</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.LoadAssembly">
            <summary>
            Loads the associated Assembly
            </summary>
            <returns>Assembly reference</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.Equals(System.Object)">
            <summary>
            Equals override to compare two ScriptEntry objects
            </summary>
            <param name="obj">comparison object</param>
            <returns>true iff both ScriptEntries represent the same script</returns>
        </member>
        <member name="M:AjaxControlToolkit.ToolkitScriptManager.ScriptEntry.GetHashCode">
            <summary>
            GetHashCode override corresponding to the Equals override above
            </summary>
            <returns>hash code for the object</returns>
        </member>
        <member name="T:AjaxControlToolkit.TextBoxWatermarkExtenderDesigner">
            <summary>
            TextBoxWatermark designer class definition
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.TabContainerDesigner">
            <summary>
            Control Designer for the TabContainer
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.TabContainerDesigner.TabLink">
            <summary>
            Our HTML templates for design time.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.#ctor">
            <summary>
            Initializes a new instance of the TabContainerDesigner class
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.GetDesignTimeHtml(System.Web.UI.Design.DesignerRegionCollection)">
            <summary>
            This is the main worker function for the designer.
            
            It figures out what the HTML shape of the design-time object should be.
            
            There are three major pieces to this
            
            1. The outer main HTML
            2. The HTML that makes up the design time tabs
            3. The HTML that is the content for the current tab
            
            Attached to several of these bits of markup are DesignerRegions.  Some regions are editable,
            some are there just to catch clicks to change tabs or add new tabs.
            </summary>
            <param name="regions"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.GetEditableDesignerRegionContent(System.Web.UI.Design.EditableDesignerRegion)">
            <summary>
            The Designer will call us back on this for each EditableDesignerRegion that we created.
            In this we return the markup that we want displayed in the editable region.
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.GetTemplateContent(System.Web.UI.ITemplate,System.String)">
            <summary>
            Helper method to instantiate the given template into a control
            an slurp out the markup.
            </summary>
            <param name="template"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.GetTabContent(AjaxControlToolkit.TabPanel,System.Boolean)">
            <summary>
            Get the content for a given tab or header
            </summary>
            <param name="tab">The tab to search</param>
            <param name="content">True for ContentTemplate, otherwise it'll do HeaderTemplate</param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initialize the deisigner
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.SetEditableDesignerRegionContent(System.Web.UI.Design.EditableDesignerRegion,System.String)">
            <summary>
            After a editable region is edited, the designer calls back with the updated markup so we can
            stuff it into the right tab.
            </summary>
            <param name="region"></param>
            <param name="content"></param>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.PersistTemplate(AjaxControlToolkit.TabPanel,System.ComponentModel.Design.IDesignerHost,System.Web.UI.ITemplate,System.String)">
            <summary>
            Helper method to save the value of a template.  This sets up all the right Undo state.
            </summary>
            <param name="panel"></param>
            <param name="host"></param>
            <param name="template"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.OnClick(System.Web.UI.Design.DesignerRegionMouseEventArgs)">
            <summary>
            Called when we get aclick on a designer region.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.OnAddTabPanel">
            <summary>
            Add a new tab panel.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.GetUniqueName(System.Type,System.Web.UI.Control)">
            <summary>
            Helper to get a unique name.  Since our Tabs aren't onthe designer surface,
            INamingSurface won't do the right thing.  Fortunately, it's easy.
            </summary>
            <returns>A unique name like "TabPanel3"</returns>
        </member>
        <member name="M:AjaxControlToolkit.TabContainerDesigner.OnRemoveTabPanel">
            <summary>
            Remove the active tab panel and set the active tab to be the previous one.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.TabContainerDesigner.TabContainer">
            <summary>
            Helper property to get the TabContainer we're designing.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.TabContainerDesigner.ActionLists">
            <summary>
            Create and return our action list - this is what creates the flyout panel with the verb commands
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.TabContainerDesigner.CurrentTabID">
            <summary>
            Sets or gets the current tab ID.  If this is set,
            it will locate the tab and notify the designer of the change.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.TabContainerDesigner.UsePreviewControl">
            <summary>
            Tell the designer we're creating our own UI.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.TabContainerDesigner.TabContainerDesignerActionList">
            <summary>
            Manages our designer verbs
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.TabContainerDesigner.DesignerPanel">
            <summary>
            a simple class to use for template instantiation
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.BulletedListItem">
            <summary>
            We create our own BulletedListItem control here (LI)
            because the ASP.NET BulletedList control exposes a collection of list items
            rather than a child collection of controls.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ListSearchPromptPosition">
            <summary>
            The positioning choices for the prompt message of the ListBox.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.HTMLEditor.Popups.PopupBGIButton.#ctor">
            <summary>
            Initializes a new PopupBGIButton
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.HoverMenuPopupPosition">
            <summary>
            The positioning choices for the popup control on the HoverMenu.  See the HoverMenuProperties class for more information.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ElementReferenceAttribute">
            <summary>
            Specifies this property is an element reference and should be converted during serialization.
            The default (e.g. cases without this attribute) will generate the element's ID
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ElementReferenceAttribute.#ctor">
            <summary>
            Constructs a new ElementReferenceAttribute
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ComponentReferenceAttribute">
            <summary>
            Signifies that this property references a ScriptComponent
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DynamicPopulateExtender">
            <summary>
            This extender allows you to dynamically populate the innerHTML of a control based on a 
            web service callback.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.DynamicPopulateExtender.ShouldSerializeServicePath">
            <summary>
            Prevent serialization of the service path if no ServiceMethod was supplied
            </summary>
            <returns>Whether or not the service path should be serialized</returns>
        </member>
        <member name="M:AjaxControlToolkit.DynamicPopulateExtender.CheckIfValid(System.Boolean)">
            <summary>
            Check if the properties have been set correctly
            </summary>
            <param name="throwException">Whether exceptions should be thrown on violations</param>
            <returns>True if the properties have been set correctly, false if not</returns>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.ClearContentsDuringUpdate">
            <summary>
            Whether or not we should clear the HTML contents of the
            target element when an update begins
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.ContextKey">
            <summary>
            An key that you can pass to the web service call, such as an ID.  This is optional.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.PopulateTriggerControlID">
            <summary>
            The ID of a control to trigger the population of the target.  The population will
            be triggered by this controls "click" event.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.ServiceMethod">
            <summary>
            The method name of the web service of page method to call.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.ServicePath">
            <summary>
            The path of the web service to call, or if this is blank, a page method will be
            called instead.
            </summary>        
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.UpdatingCssClass">
            <summary>
            A CSS style to apply while the update is in progress
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.CustomScript">
            <summary>
            A CustomScript can be used to eval a javascript function that will return a string to populate the control.  This script method
            must return a string and will be called instead of the Service or Page method.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DynamicPopulateExtender.CacheDynamicResults">
            <summary>
            Whether the results of the dynamic population should be cached and
            not fetched again after the first load
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.DropDownExtender.OnPreRender(System.EventArgs)">
            <summary>
            If the DynamicControlID was not supplied, use the DropDownControlID instead.
            </summary>
            <param name="e">EventArgs</param>
            <remarks>
            This is in place for backward compatability (when DropDownExtender.DynamicControlID
            didn't exist and DropDownExtender.DropDownControlID was used instead)
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.DropDownExtender.OnShow">
            <summary>
            OnShow animation
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DropDownExtender.OnHide">
            <summary>
            OnHide animation
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CollapsiblePanelDesigner">
            <summary>
            Designer class for the CollapsiblePanel
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.AccordionExtenderDesigner">
            <summary>
            Designer for the AccordionExtender
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.UpdatePanelAnimationDesigner">
            <summary>
            Designer for UpdatePanelAnimationExtender
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ScriptCombineAttribute">
            <summary>
            Attribute used to indicate which scripts of an assembly can be combined by ToolkitScriptManager
            </summary>
            <remarks>
            When this attribute is present, all assembly scripts are combinable by default -
            use the ExcludeScripts/IncludeScripts properties to restrict that behavior
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ScriptCombineAttribute.ExcludeScripts">
            <summary>
            Comma-delimited list of script names to exclude from script combining
            </summary>
            <remarks>
            Overrides IncludeScripts
            </remarks>
        </member>
        <member name="P:AjaxControlToolkit.ScriptCombineAttribute.IncludeScripts">
            <summary>
            Comma-delimited list of script names to include for script combining
            </summary>
            <remarks>
            If absent, all script names are included; if present, only the specified scripts are included
            </remarks>
        </member>
        <member name="T:AjaxControlToolkit.TabStripPlacement">
            <summary>
            Display the tabs on top of the panel or below (default is top)
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.TabStripPlacement.Top">
            <summary>
            Render the tabs on top of the panel
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.TabStripPlacement.Bottom">
            <summary>
            Render the tabs below the panel
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Slide">
            <summary>
            Class to represent the slide object.
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Slide.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Slide.#ctor(System.String,System.String,System.String)">
            <summary>
            Slide constructor with params
            </summary>
            <param name="imagePath"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="P:AjaxControlToolkit.Slide.ImagePath">
            <summary>
            image source path/url
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Slide.Name">
            <summary>
            image name
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.Slide.Description">
            <summary>
            image description
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DraggableListItemExtender">
            <summary>
            This just wraps the Ajax draggableListItem behavior.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.FilteredTextBoxExtender.FilterType">
            <summary>
            The type of filter to be used by the extender
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.FilteredTextBoxExtender.FilterMode">
            <summary>
            The filter mode to be used by the extender
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.FilteredTextBoxExtender.ValidChars">
            <summary>
            A string consisting of all valid chars for the text field
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.FilteredTextBoxExtender.InvalidChars">
            <summary>
            A string consisting of all invalid chars for the text field
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.FilteredTextBoxExtender.FilterInterval">
            <summary>
            An integer containing the interval (in milliseconds) in which 
            the field's contents are filtered
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ExtenderControlMethodAttribute">
            <summary>
            Signifies that this method should be exposed as a client callback 
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlMethodAttribute.#ctor">
            <summary>
            Initializes a new ExtenderControlMethodAttribute
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlMethodAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new ExtenderControlMethodAttribute
            </summary>
            <param name="isScriptMethod"></param>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlMethodAttribute.Equals(System.Object)">
            <summary>
            Tests for object equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlMethodAttribute.GetHashCode">
            <summary>
            Gets a hash code for this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AjaxControlToolkit.ExtenderControlMethodAttribute.IsDefaultAttribute">
            <summary>
            Gets whether this is the default value for this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:AjaxControlToolkit.ExtenderControlMethodAttribute.IsScriptMethod">
            <summary>
            Whether this is a valid ScriptMethod
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.DragPanelExtender">
            <summary>
            This extender attaches the stock "floatingBehavior" to a Panel, and is an example
            of wrapping an existing behavior with an extender.
            
            When attached to a Panel, the user can then drag that panel around the browser rendering surface
            using the mouse.
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.DragPanelExtender.DragHandleID">
            <summary>
            The server ID of a control that will serve as the "handle" for this drag operation.
            When the user clicks and drags on this control, the associated panel will be moved as well.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.Utility">
            <summary>
            Utility methods for use with the Toolkit
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.Utility.SetFocusOnLoad(System.Web.UI.Control)">
            <summary>
            Set the focus of a control after all the client-side behaviors
            have finished initializing
            </summary>
            <param name="control">Control to focus</param>
            <remarks>
            SetFocusOnLoad is a replacement for ScriptManager.SetFocus and
            Page.SetFocus that will focus the control after any client-side
            behaviors have been initialized.
            </remarks>
        </member>
        <member name="T:AjaxControlToolkit.CascadingDropDownDesigner">
            <summary>
            CascadingDropDown designer class definition
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.CascadingDropDownDesigner.GetDropDownContents">
            <summary>
            Signature of the page method for CascadingDropDown's web service that
            is used to support adding/navigating to the page method from the designer
            </summary>
            <param name="knownCategoryValues">Seperated string containing the category values already known</param>
            <param name="category">Current category</param>
            <returns>CacadingDropDownNameValue pairs</returns>
        </member>
        <member name="T:AjaxControlToolkit.ReorderListItemReorderEventArgs">
            <summary>
            The EventArgs class for use with the ReorderList.Reorder event.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderListItemEventArgs">
            <summary>
            A generic EventArgs for events coming from ReorderListItems
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListItemReorderEventArgs.OldIndex">
            <summary>
            The original index of the item
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListItemReorderEventArgs.NewIndex">
            <summary>
            The new index of the item
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ReorderListCommandEventArgs">
            <summary>
            The EventArgs class that's used for all the command events fired by the ReorderList
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListCommandEventArgs.Item">
            <summary>
            The item the command was fired on
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ReorderListCommandEventArgs.Source">
            <summary>
            The source object that originally fired the event
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.PopupControlDesigner">
            <summary>
            PopupControl designer class definition
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.PopupControlDesigner.GetDynamicContent">
            <summary>
            Signature of the page method for DynamicPopulateExtenderControlBase's web
            service that is used to support adding/navigating to the page method from
            the designer
            </summary>
            <param name="contextKey">User specific context</param>
            <returns>Dynamically generated content</returns>
        </member>
        <member name="P:AjaxControlToolkit.MutuallyExclusiveCheckBoxExtender.Key">
            <summary>
            The unique key to use to associate checkboxes. This key does
            not respect INamingContainer renaming.
            </summary>
        </member>
        <member name="T:AjaxControlToolkit.ModalPopupExtender">
            <summary>
            Extender for the ModalPopup
            </summary>
        </member>
        <member name="F:AjaxControlToolkit.ModalPopupExtender._show">
            <summary>
            Desired visibility state: true, false or none
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ModalPopupExtender.Show">
            <summary>
            Cause the ModalPopup to be shown by sending script to the client
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ModalPopupExtender.Hide">
            <summary>
            Cause the ModalPopup to be hidden by sending script to the client
            </summary>
        </member>
        <member name="M:AjaxControlToolkit.ModalPopupExtender.OnPreRender(System.EventArgs)">
            <summary>
            Handles the PreRender event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AjaxControlToolkit.ModalPopupExtender.ChangeVisibility(System.Boolean)">
            <summary>
            Emit script to the client that will cause the modal popup behavior
            to be shown or hidden
            </summary>
            <param name="show">True to show the popup, false to hide it</param>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.PopupControlID">
            <summary>
            The ID of the element to display as a modal popup
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.BackgroundCssClass">
            <summary>
            The CSS class to apply to the background when the modal popup is displayed
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.OkControlID">
            <summary>
            The ID of the element that dismisses the modal popup
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.CancelControlID">
            <summary>
            The ID of the element that cancels the modal popup
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.OnOkScript">
            <summary>
            Script to run when the modal popup is dismissed with the OkControlID
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.OnCancelScript">
            <summary>
            Script to run when the modal popup is dismissed with the CancelControlID
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.X">
            <summary>
            The X coordinate of the top/left corner of the modal popup
            (the popup will be centered horizontally if not specified)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.Y">
            <summary>
            The Y coordinate of the top/left corner of the modal popup
            (the popup will be centered vertically if not specified)
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.Drag">
            <summary>
            True to enable dragging the popup
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.PopupDragHandleControlID">
            <summary>
            The ID of the embedded element that contains the popup
            header/title which will be used as a drag handle
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.DropShadow">
            <summary>
            True to automatically add a drop-shadow to the modal popup
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.OnShown">
            <summary>
            Animation to perform once the modal popup is shown
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.OnHidden">
            <summary>
            Animation to perform once the modal popup is hidden
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.OnShowing">
            <summary>
            Animation to perform just before the modal popup is being shown
            </summary>
        </member>
        <member name="P:AjaxControlToolkit.ModalPopupExtender.OnHiding">
            <summary>
            Animation to perform just before the modal popup is being hidden.
            The popup closes only after the animation completes.
            </summary>
        </member>
    </members>
</doc>
